# Code generated by lark_sdk_gen. DO NOT EDIT.

from pylark.log import logger
from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest


class Test_HumanAuth_Sample_RequestFailed(unittest.TestCase):
    def __init__(self):
        super().__init__()
        self.cli = app_all_permission.ins()
        # self.cli.mock().MockGetTenantAccessToken(mockGetTenantAccessTokenFailed)
        # self.cli.mock().MockGetAppAccessToken(mockGetTenantAccessTokenFailed)
        self.module_cli = self.cli.human_auth

    def test_request_failed_get_face_verify_auth_result(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetFaceVerifyAuthResult(
                pylark.GetFaceVerifyAuthResultReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_upload_face_verify_image(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UploadFaceVerifyImage(
                pylark.UploadFaceVerifyImageReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_crop_face_verify_image(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CropFaceVerifyImage(
                pylark.CropFaceVerifyImageReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_identity(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateIdentity(pylark.CreateIdentityReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")
