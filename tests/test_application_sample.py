# Code generated by lark_sdk_gen. DO NOT EDIT.

from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest
from tests.test_helper import mock_get_tenant_access_token_failed


class TestApplicationSampleRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestApplicationSampleRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.application

    def test_request_failed_is_application_user_admin(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.is_application_user_admin(
                pylark.IsApplicationUserAdminReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_application_user_admin_scope(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_application_user_admin_scope(
                pylark.GetApplicationUserAdminScopeReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_application_app_visibility(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_application_app_visibility(
                pylark.GetApplicationAppVisibilityReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_application_user_visible_app(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_application_user_visible_app(
                pylark.GetApplicationUserVisibleAppReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_application_app_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_application_app_list(pylark.GetApplicationAppListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_application_app_visibility(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_application_app_visibility(
                pylark.UpdateApplicationAppVisibilityReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_application_app_admin_user_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_application_app_admin_user_list(
                pylark.GetApplicationAppAdminUserListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_check_user_is_in_application_paid_scope(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.check_user_is_in_application_paid_scope(
                pylark.CheckUserIsInApplicationPaidScopeReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_application_order_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_application_order_list(
                pylark.GetApplicationOrderListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_application_order(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_application_order(pylark.GetApplicationOrderReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_application_usage_overview(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_application_usage_overview(
                pylark.GetApplicationUsageOverviewReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_application_usage_trend(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_application_usage_trend(
                pylark.GetApplicationUsageTrendReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_application_usage_detail(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_application_usage_detail(
                pylark.GetApplicationUsageDetailReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_application_message_overview(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_application_message_overview(
                pylark.GetApplicationMessageOverviewReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_application_message_trend(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_application_message_trend(
                pylark.GetApplicationMessageTrendReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_application_message_detail(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_application_message_detail(
                pylark.GetApplicationMessageDetailReq()
            )

        assert "msg=failed" in f"{e}"
