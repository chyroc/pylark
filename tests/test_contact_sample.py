# Code generated by lark_sdk_gen. DO NOT EDIT.

from pylark.log import logger
from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest


class Test_Contact_Sample_RequestFailed(unittest.TestCase):
    def __init__(self):
        super().__init__()
        self.cli = app_all_permission.ins()
        # self.cli.mock().MockGetTenantAccessToken(mockGetTenantAccessTokenFailed)
        # self.cli.mock().MockGetAppAccessToken(mockGetTenantAccessTokenFailed)
        self.module_cli = self.cli.contact

    def test_request_failed_create_user(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateUser(pylark.CreateUserReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_user(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteUser(pylark.DeleteUserReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_user(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetUser(pylark.GetUserReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_batch_get_user(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.BatchGetUser(pylark.BatchGetUserReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_batch_get_user_by_id(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.BatchGetUserByID(
                pylark.BatchGetUserByIDReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_user_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetUserList(pylark.GetUserListReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_user_patch(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateUserPatch(pylark.UpdateUserPatchReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_user(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateUser(pylark.UpdateUserReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_department(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateDepartment(
                pylark.CreateDepartmentReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_department(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetDepartment(pylark.GetDepartmentReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_department_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetDepartmentList(
                pylark.GetDepartmentListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_parent_department(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetParentDepartment(
                pylark.GetParentDepartmentReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_department_patch(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateDepartmentPatch(
                pylark.UpdateDepartmentPatchReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_department(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateDepartment(
                pylark.UpdateDepartmentReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_department(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteDepartment(
                pylark.DeleteDepartmentReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_employee_type_enum_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetEmployeeTypeEnumList(
                pylark.GetEmployeeTypeEnumListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_employee_type_enum_patch(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateEmployeeTypeEnumPatch(
                pylark.UpdateEmployeeTypeEnumPatchReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_employee_type_enum(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteEmployeeTypeEnum(
                pylark.DeleteEmployeeTypeEnumReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_employee_type_enum(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateEmployeeTypeEnum(
                pylark.CreateEmployeeTypeEnumReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_contact_custom_attr_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetContactCustomAttrList(
                pylark.GetContactCustomAttrListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")
