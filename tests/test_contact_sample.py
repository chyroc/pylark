# Code generated by lark_sdk_gen. DO NOT EDIT.

from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest
from tests.test_helper import mock_get_tenant_access_token_failed


class TestContactSampleRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestContactSampleRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.contact

    def test_request_failed_create_user(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_user(pylark.CreateUserReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_user(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_user(pylark.DeleteUserReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_user(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_user(pylark.GetUserReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_get_user(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_user(pylark.BatchGetUserReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_get_user_by_id(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_user_by_id(pylark.BatchGetUserByIDReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_user_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_user_list(pylark.GetUserListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_user_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_user_patch(pylark.UpdateUserPatchReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_user(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_user(pylark.UpdateUserReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_department(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_department(pylark.CreateDepartmentReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_department(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_department(pylark.GetDepartmentReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_department_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_department_list(pylark.GetDepartmentListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_parent_department(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_parent_department(pylark.GetParentDepartmentReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_department_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_department_patch(pylark.UpdateDepartmentPatchReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_department(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_department(pylark.UpdateDepartmentReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_department(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_department(pylark.DeleteDepartmentReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_employee_type_enum_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_employee_type_enum_list(
                pylark.GetEmployeeTypeEnumListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_employee_type_enum_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_employee_type_enum_patch(
                pylark.UpdateEmployeeTypeEnumPatchReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_employee_type_enum(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_employee_type_enum(
                pylark.DeleteEmployeeTypeEnumReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_employee_type_enum(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_employee_type_enum(
                pylark.CreateEmployeeTypeEnumReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_contact_custom_attr_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_contact_custom_attr_list(
                pylark.GetContactCustomAttrListReq()
            )

        assert "msg=failed" in f"{e}"
