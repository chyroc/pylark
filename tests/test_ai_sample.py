# Code generated by lark_sdk_gen. DO NOT EDIT.

import unittest
import pylark
import pytest
from tests.test_conf import app_all_permission, app_no_permission
from tests.test_helper import mock_get_tenant_access_token_failed


def mock(*args, **kwargs):
    raise pylark.PyLarkError(scope="scope", func="func", code=1, msg="mock-failed")


def mock_raw_request(*args, **kwargs):
    raise pylark.PyLarkError(
        scope="scope", func="func", code=1, msg="mock-raw-request-failed"
    )


# mock get token
class TestAISampleMockGetTokenFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestAISampleMockGetTokenFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.ai

    def test_mock_get_token_recognize_basic_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.recognize_basic_image(pylark.RecognizeBasicImageReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_recognize_speech_stream(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.recognize_speech_stream(pylark.RecognizeSpeechStreamReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_recognize_speech_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.recognize_speech_file(pylark.RecognizeSpeechFileReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_translate_text(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.translate_text(pylark.TranslateTextReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_detect_text_language(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.detect_text_language(pylark.DetectTextLanguageReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_detect_face_attributes(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.detect_face_attributes(pylark.DetectFaceAttributesReq())

        assert "msg=failed" in f"{e}"


# mock mock self func
class TestAISampleMockSelfFuncFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestAISampleMockSelfFuncFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.ai

    def test_mock_self_func_recognize_basic_image(self):
        origin_func = self.module_cli.recognize_basic_image
        self.module_cli.recognize_basic_image = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.recognize_basic_image(pylark.RecognizeBasicImageReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.recognize_basic_image = origin_func

    def test_mock_self_func_recognize_speech_stream(self):
        origin_func = self.module_cli.recognize_speech_stream
        self.module_cli.recognize_speech_stream = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.recognize_speech_stream(pylark.RecognizeSpeechStreamReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.recognize_speech_stream = origin_func

    def test_mock_self_func_recognize_speech_file(self):
        origin_func = self.module_cli.recognize_speech_file
        self.module_cli.recognize_speech_file = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.recognize_speech_file(pylark.RecognizeSpeechFileReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.recognize_speech_file = origin_func

    def test_mock_self_func_translate_text(self):
        origin_func = self.module_cli.translate_text
        self.module_cli.translate_text = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.translate_text(pylark.TranslateTextReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.translate_text = origin_func

    def test_mock_self_func_detect_text_language(self):
        origin_func = self.module_cli.detect_text_language
        self.module_cli.detect_text_language = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.detect_text_language(pylark.DetectTextLanguageReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.detect_text_language = origin_func

    def test_mock_self_func_detect_face_attributes(self):
        origin_func = self.module_cli.detect_face_attributes
        self.module_cli.detect_face_attributes = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.detect_face_attributes(pylark.DetectFaceAttributesReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.detect_face_attributes = origin_func


# mock raw request
class TestAISampleMockRawRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestAISampleMockRawRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.ai
        self.cli.raw_request = mock_raw_request

    def test_mock_raw_request_recognize_basic_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.recognize_basic_image(pylark.RecognizeBasicImageReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_recognize_speech_stream(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.recognize_speech_stream(pylark.RecognizeSpeechStreamReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_recognize_speech_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.recognize_speech_file(pylark.RecognizeSpeechFileReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_translate_text(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.translate_text(pylark.TranslateTextReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_detect_text_language(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.detect_text_language(pylark.DetectTextLanguageReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_detect_face_attributes(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.detect_face_attributes(pylark.DetectFaceAttributesReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg


# real request
class TestAISampleRealRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestAISampleRealRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_no_permission.ins()
        self.module_cli = self.cli.ai

    def test_real_request_recognize_basic_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.recognize_basic_image(pylark.RecognizeBasicImageReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_recognize_speech_stream(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.recognize_speech_stream(pylark.RecognizeSpeechStreamReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_recognize_speech_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.recognize_speech_file(pylark.RecognizeSpeechFileReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_translate_text(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.translate_text(pylark.TranslateTextReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_detect_text_language(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.detect_text_language(pylark.DetectTextLanguageReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_detect_face_attributes(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.detect_face_attributes(pylark.DetectFaceAttributesReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
