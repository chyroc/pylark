# Code generated by lark_sdk_gen. DO NOT EDIT.

import unittest
import pylark
import pytest
from tests.test_conf import app_all_permission, app_no_permission
from tests.test_helper import mock_get_tenant_access_token_failed


def mock(*args, **kwargs):
    raise pylark.PyLarkError(scope="scope", func="func", code=1, msg="mock-failed")


def mock_raw_request(*args, **kwargs):
    raise pylark.PyLarkError(
        scope="scope", func="func", code=1, msg="mock-raw-request-failed"
    )


# mock get token
class TestVCSampleMockGetTokenFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestVCSampleMockGetTokenFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.vc

    def test_mock_get_token_get_vc_meeting(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_meeting(pylark.GetVCMeetingReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_kickout_vc_meeting(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.kickout_vc_meeting(pylark.KickoutVCMeetingReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_set_vc_host_meeting(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_vc_host_meeting(pylark.SetVCHostMeetingReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_vc_daily_report(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_daily_report(pylark.GetVCDailyReportReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_vc_top_user_report(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_top_user_report(pylark.GetVCTopUserReportReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_vc_room_config(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_room_config(pylark.GetVCRoomConfigReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_set_vc_room_config(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_vc_room_config(pylark.SetVCRoomConfigReq())

        assert "msg=failed" in f"{e}"


# mock mock self func
class TestVCSampleMockSelfFuncFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestVCSampleMockSelfFuncFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.vc

    def test_mock_self_func_get_vc_meeting(self):
        origin_func = self.module_cli.get_vc_meeting
        self.module_cli.get_vc_meeting = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_meeting(pylark.GetVCMeetingReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_vc_meeting = origin_func

    def test_mock_self_func_kickout_vc_meeting(self):
        origin_func = self.module_cli.kickout_vc_meeting
        self.module_cli.kickout_vc_meeting = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.kickout_vc_meeting(pylark.KickoutVCMeetingReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.kickout_vc_meeting = origin_func

    def test_mock_self_func_set_vc_host_meeting(self):
        origin_func = self.module_cli.set_vc_host_meeting
        self.module_cli.set_vc_host_meeting = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_vc_host_meeting(pylark.SetVCHostMeetingReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.set_vc_host_meeting = origin_func

    def test_mock_self_func_get_vc_daily_report(self):
        origin_func = self.module_cli.get_vc_daily_report
        self.module_cli.get_vc_daily_report = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_daily_report(pylark.GetVCDailyReportReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_vc_daily_report = origin_func

    def test_mock_self_func_get_vc_top_user_report(self):
        origin_func = self.module_cli.get_vc_top_user_report
        self.module_cli.get_vc_top_user_report = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_top_user_report(pylark.GetVCTopUserReportReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_vc_top_user_report = origin_func

    def test_mock_self_func_get_vc_room_config(self):
        origin_func = self.module_cli.get_vc_room_config
        self.module_cli.get_vc_room_config = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_room_config(pylark.GetVCRoomConfigReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_vc_room_config = origin_func

    def test_mock_self_func_set_vc_room_config(self):
        origin_func = self.module_cli.set_vc_room_config
        self.module_cli.set_vc_room_config = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_vc_room_config(pylark.SetVCRoomConfigReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.set_vc_room_config = origin_func


# mock raw request
class TestVCSampleMockRawRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestVCSampleMockRawRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.vc
        self.cli.raw_request = mock_raw_request

    def test_mock_raw_request_get_vc_meeting(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_meeting(
                pylark.GetVCMeetingReq(
                    meeting_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_kickout_vc_meeting(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.kickout_vc_meeting(
                pylark.KickoutVCMeetingReq(
                    meeting_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_set_vc_host_meeting(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_vc_host_meeting(
                pylark.SetVCHostMeetingReq(
                    meeting_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_vc_daily_report(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_daily_report(pylark.GetVCDailyReportReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_vc_top_user_report(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_top_user_report(pylark.GetVCTopUserReportReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_vc_room_config(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_room_config(pylark.GetVCRoomConfigReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_set_vc_room_config(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_vc_room_config(pylark.SetVCRoomConfigReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg


# real request
class TestVCSampleRealRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestVCSampleRealRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_no_permission.ins()
        self.module_cli = self.cli.vc

    def test_real_request_get_vc_meeting(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_meeting(
                pylark.GetVCMeetingReq(
                    meeting_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_kickout_vc_meeting(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.kickout_vc_meeting(
                pylark.KickoutVCMeetingReq(
                    meeting_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_set_vc_host_meeting(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_vc_host_meeting(
                pylark.SetVCHostMeetingReq(
                    meeting_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_vc_daily_report(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_daily_report(pylark.GetVCDailyReportReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_vc_top_user_report(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_top_user_report(pylark.GetVCTopUserReportReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_vc_room_config(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_room_config(pylark.GetVCRoomConfigReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_set_vc_room_config(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_vc_room_config(pylark.SetVCRoomConfigReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
