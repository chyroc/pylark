# Code generated by lark_sdk_gen. DO NOT EDIT.

from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest
from tests.test_helper import mock_get_tenant_access_token_failed


class TestVCSampleRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestVCSampleRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.vc

    def test_request_failed_get_vc_meeting(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_meeting(pylark.GetVCMeetingReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_set_vc_host_meeting(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_vc_host_meeting(pylark.SetVCHostMeetingReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_vc_daily_report(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_daily_report(pylark.GetVCDailyReportReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_vc_top_user_report(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_top_user_report(pylark.GetVCTopUserReportReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_vc_room_config(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_vc_room_config(pylark.GetVCRoomConfigReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_set_vc_room_config(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_vc_room_config(pylark.SetVCRoomConfigReq())

        assert "msg=failed" in f"{e}"
