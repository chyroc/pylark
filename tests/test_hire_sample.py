# Code generated by lark_sdk_gen. DO NOT EDIT.

import unittest
import pylark
import pytest
from tests.test_conf import app_all_permission, app_no_permission
from tests.test_helper import mock_get_tenant_access_token_failed


def mock(*args, **kwargs):
    raise pylark.PyLarkError(scope="scope", func="func", code=1, msg="mock-failed")


def mock_raw_request(*args, **kwargs):
    raise pylark.PyLarkError(
        scope="scope", func="func", code=1, msg="mock-raw-request-failed"
    )


# mock get token
class TestHireSampleMockGetTokenFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestHireSampleMockGetTokenFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.hire

    def test_mock_get_token_get_hire_job(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job(pylark.GetHireJobReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_job_manager(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job_manager(pylark.GetHireJobManagerReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_talent(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_talent(pylark.GetHireTalentReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_attachment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_attachment(pylark.GetHireAttachmentReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_attachment_preview(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_attachment_preview(
                pylark.GetHireAttachmentPreviewReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_resume_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_resume_source(pylark.GetHireResumeSourceReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_hire_note(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_hire_note(pylark.CreateHireNoteReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_hire_note(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_hire_note(pylark.UpdateHireNoteReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_note(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_note(pylark.GetHireNoteReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_note_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_note_list(pylark.GetHireNoteListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_referral_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_referral_by_application(
                pylark.GetHireReferralByApplicationReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_job_process_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job_process_list(pylark.GetHireJobProcessListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_hire_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_hire_application(pylark.CreateHireApplicationReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_terminate_hire_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.terminate_hire_application(
                pylark.TerminateHireApplicationReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application(pylark.GetHireApplicationReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_application_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application_list(
                pylark.GetHireApplicationListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_application_interview_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application_interview_list(
                pylark.GetHireApplicationInterviewListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_offer_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_offer_by_application(
                pylark.GetHireOfferByApplicationReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_offer_schema(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_offer_schema(pylark.GetHireOfferSchemaReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_make_hire_transfer_onboard_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.make_hire_transfer_onboard_by_application(
                pylark.MakeHireTransferOnboardByApplicationReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_hire_employee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_hire_employee(pylark.UpdateHireEmployeeReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_employee_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_employee_by_application(
                pylark.GetHireEmployeeByApplicationReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_hire_employee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_employee(pylark.GetHireEmployeeReq())

        assert "msg=failed" in f"{e}"


# mock mock self func
class TestHireSampleMockSelfFuncFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestHireSampleMockSelfFuncFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.hire

    def test_mock_self_func_get_hire_job(self):
        origin_func = self.module_cli.get_hire_job
        self.module_cli.get_hire_job = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job(pylark.GetHireJobReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_job = origin_func

    def test_mock_self_func_get_hire_job_manager(self):
        origin_func = self.module_cli.get_hire_job_manager
        self.module_cli.get_hire_job_manager = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job_manager(pylark.GetHireJobManagerReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_job_manager = origin_func

    def test_mock_self_func_get_hire_talent(self):
        origin_func = self.module_cli.get_hire_talent
        self.module_cli.get_hire_talent = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_talent(pylark.GetHireTalentReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_talent = origin_func

    def test_mock_self_func_get_hire_attachment(self):
        origin_func = self.module_cli.get_hire_attachment
        self.module_cli.get_hire_attachment = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_attachment(pylark.GetHireAttachmentReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_attachment = origin_func

    def test_mock_self_func_get_hire_attachment_preview(self):
        origin_func = self.module_cli.get_hire_attachment_preview
        self.module_cli.get_hire_attachment_preview = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_attachment_preview(
                pylark.GetHireAttachmentPreviewReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_attachment_preview = origin_func

    def test_mock_self_func_get_hire_resume_source(self):
        origin_func = self.module_cli.get_hire_resume_source
        self.module_cli.get_hire_resume_source = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_resume_source(pylark.GetHireResumeSourceReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_resume_source = origin_func

    def test_mock_self_func_create_hire_note(self):
        origin_func = self.module_cli.create_hire_note
        self.module_cli.create_hire_note = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_hire_note(pylark.CreateHireNoteReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_hire_note = origin_func

    def test_mock_self_func_update_hire_note(self):
        origin_func = self.module_cli.update_hire_note
        self.module_cli.update_hire_note = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_hire_note(pylark.UpdateHireNoteReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_hire_note = origin_func

    def test_mock_self_func_get_hire_note(self):
        origin_func = self.module_cli.get_hire_note
        self.module_cli.get_hire_note = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_note(pylark.GetHireNoteReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_note = origin_func

    def test_mock_self_func_get_hire_note_list(self):
        origin_func = self.module_cli.get_hire_note_list
        self.module_cli.get_hire_note_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_note_list(pylark.GetHireNoteListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_note_list = origin_func

    def test_mock_self_func_get_hire_referral_by_application(self):
        origin_func = self.module_cli.get_hire_referral_by_application
        self.module_cli.get_hire_referral_by_application = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_referral_by_application(
                pylark.GetHireReferralByApplicationReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_referral_by_application = origin_func

    def test_mock_self_func_get_hire_job_process_list(self):
        origin_func = self.module_cli.get_hire_job_process_list
        self.module_cli.get_hire_job_process_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job_process_list(pylark.GetHireJobProcessListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_job_process_list = origin_func

    def test_mock_self_func_create_hire_application(self):
        origin_func = self.module_cli.create_hire_application
        self.module_cli.create_hire_application = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_hire_application(pylark.CreateHireApplicationReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_hire_application = origin_func

    def test_mock_self_func_terminate_hire_application(self):
        origin_func = self.module_cli.terminate_hire_application
        self.module_cli.terminate_hire_application = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.terminate_hire_application(
                pylark.TerminateHireApplicationReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.terminate_hire_application = origin_func

    def test_mock_self_func_get_hire_application(self):
        origin_func = self.module_cli.get_hire_application
        self.module_cli.get_hire_application = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application(pylark.GetHireApplicationReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_application = origin_func

    def test_mock_self_func_get_hire_application_list(self):
        origin_func = self.module_cli.get_hire_application_list
        self.module_cli.get_hire_application_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application_list(
                pylark.GetHireApplicationListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_application_list = origin_func

    def test_mock_self_func_get_hire_application_interview_list(self):
        origin_func = self.module_cli.get_hire_application_interview_list
        self.module_cli.get_hire_application_interview_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application_interview_list(
                pylark.GetHireApplicationInterviewListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_application_interview_list = origin_func

    def test_mock_self_func_get_hire_offer_by_application(self):
        origin_func = self.module_cli.get_hire_offer_by_application
        self.module_cli.get_hire_offer_by_application = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_offer_by_application(
                pylark.GetHireOfferByApplicationReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_offer_by_application = origin_func

    def test_mock_self_func_get_hire_offer_schema(self):
        origin_func = self.module_cli.get_hire_offer_schema
        self.module_cli.get_hire_offer_schema = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_offer_schema(pylark.GetHireOfferSchemaReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_offer_schema = origin_func

    def test_mock_self_func_make_hire_transfer_onboard_by_application(self):
        origin_func = self.module_cli.make_hire_transfer_onboard_by_application
        self.module_cli.make_hire_transfer_onboard_by_application = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.make_hire_transfer_onboard_by_application(
                pylark.MakeHireTransferOnboardByApplicationReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.make_hire_transfer_onboard_by_application = origin_func

    def test_mock_self_func_update_hire_employee(self):
        origin_func = self.module_cli.update_hire_employee
        self.module_cli.update_hire_employee = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_hire_employee(pylark.UpdateHireEmployeeReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_hire_employee = origin_func

    def test_mock_self_func_get_hire_employee_by_application(self):
        origin_func = self.module_cli.get_hire_employee_by_application
        self.module_cli.get_hire_employee_by_application = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_employee_by_application(
                pylark.GetHireEmployeeByApplicationReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_employee_by_application = origin_func

    def test_mock_self_func_get_hire_employee(self):
        origin_func = self.module_cli.get_hire_employee
        self.module_cli.get_hire_employee = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_employee(pylark.GetHireEmployeeReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_hire_employee = origin_func


# mock raw request
class TestHireSampleMockRawRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestHireSampleMockRawRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.hire
        self.cli.raw_request = mock_raw_request

    def test_mock_raw_request_get_hire_job(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job(
                pylark.GetHireJobReq(
                    job_id=1,
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_job_manager(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job_manager(
                pylark.GetHireJobManagerReq(
                    job_id="x",
                    manager_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_talent(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_talent(
                pylark.GetHireTalentReq(
                    talent_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_attachment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_attachment(
                pylark.GetHireAttachmentReq(
                    attachment_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_attachment_preview(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_attachment_preview(
                pylark.GetHireAttachmentPreviewReq(
                    attachment_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_resume_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_resume_source(pylark.GetHireResumeSourceReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_hire_note(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_hire_note(pylark.CreateHireNoteReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_hire_note(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_hire_note(
                pylark.UpdateHireNoteReq(
                    note_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_note(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_note(
                pylark.GetHireNoteReq(
                    note_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_note_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_note_list(pylark.GetHireNoteListReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_referral_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_referral_by_application(
                pylark.GetHireReferralByApplicationReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_job_process_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job_process_list(pylark.GetHireJobProcessListReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_hire_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_hire_application(pylark.CreateHireApplicationReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_terminate_hire_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.terminate_hire_application(
                pylark.TerminateHireApplicationReq(
                    application_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application(
                pylark.GetHireApplicationReq(
                    application_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_application_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application_list(
                pylark.GetHireApplicationListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_application_interview_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application_interview_list(
                pylark.GetHireApplicationInterviewListReq(
                    application_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_offer_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_offer_by_application(
                pylark.GetHireOfferByApplicationReq(
                    application_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_offer_schema(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_offer_schema(
                pylark.GetHireOfferSchemaReq(
                    offer_schema_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_make_hire_transfer_onboard_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.make_hire_transfer_onboard_by_application(
                pylark.MakeHireTransferOnboardByApplicationReq(
                    application_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_hire_employee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_hire_employee(
                pylark.UpdateHireEmployeeReq(
                    employee_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_employee_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_employee_by_application(
                pylark.GetHireEmployeeByApplicationReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_hire_employee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_employee(
                pylark.GetHireEmployeeReq(
                    employee_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg


# real request
class TestHireSampleRealRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestHireSampleRealRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_no_permission.ins()
        self.module_cli = self.cli.hire

    def test_real_request_get_hire_job(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job(
                pylark.GetHireJobReq(
                    job_id=1,
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_job_manager(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job_manager(
                pylark.GetHireJobManagerReq(
                    job_id="x",
                    manager_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_talent(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_talent(
                pylark.GetHireTalentReq(
                    talent_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_attachment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_attachment(
                pylark.GetHireAttachmentReq(
                    attachment_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_attachment_preview(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_attachment_preview(
                pylark.GetHireAttachmentPreviewReq(
                    attachment_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_resume_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_resume_source(pylark.GetHireResumeSourceReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_hire_note(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_hire_note(pylark.CreateHireNoteReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_hire_note(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_hire_note(
                pylark.UpdateHireNoteReq(
                    note_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_note(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_note(
                pylark.GetHireNoteReq(
                    note_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_note_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_note_list(pylark.GetHireNoteListReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_referral_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_referral_by_application(
                pylark.GetHireReferralByApplicationReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_job_process_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job_process_list(pylark.GetHireJobProcessListReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_hire_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_hire_application(pylark.CreateHireApplicationReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_terminate_hire_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.terminate_hire_application(
                pylark.TerminateHireApplicationReq(
                    application_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application(
                pylark.GetHireApplicationReq(
                    application_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_application_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application_list(
                pylark.GetHireApplicationListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_application_interview_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application_interview_list(
                pylark.GetHireApplicationInterviewListReq(
                    application_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_offer_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_offer_by_application(
                pylark.GetHireOfferByApplicationReq(
                    application_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_offer_schema(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_offer_schema(
                pylark.GetHireOfferSchemaReq(
                    offer_schema_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_make_hire_transfer_onboard_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.make_hire_transfer_onboard_by_application(
                pylark.MakeHireTransferOnboardByApplicationReq(
                    application_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_hire_employee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_hire_employee(
                pylark.UpdateHireEmployeeReq(
                    employee_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_employee_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_employee_by_application(
                pylark.GetHireEmployeeByApplicationReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_hire_employee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_employee(
                pylark.GetHireEmployeeReq(
                    employee_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
