# Code generated by lark_sdk_gen. DO NOT EDIT.

from pylark.log import logger
from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest


class Test_Hire_Sample_RequestFailed(unittest.TestCase):
    def __init__(self):
        super().__init__()
        self.cli = app_all_permission.ins()
        # self.cli.mock().MockGetTenantAccessToken(mockGetTenantAccessTokenFailed)
        # self.cli.mock().MockGetAppAccessToken(mockGetTenantAccessTokenFailed)
        self.module_cli = self.cli.hire

    def test_request_failed_get_hire_job(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireJob(pylark.GetHireJobReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_job_manager(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireJobManager(
                pylark.GetHireJobManagerReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_talent(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireTalent(pylark.GetHireTalentReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_attachment(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireAttachment(
                pylark.GetHireAttachmentReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_attachment_preview(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireAttachmentPreview(
                pylark.GetHireAttachmentPreviewReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_resume_source(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireResumeSource(
                pylark.GetHireResumeSourceReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_hire_note(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateHireNote(pylark.CreateHireNoteReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_hire_note(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateHireNote(pylark.UpdateHireNoteReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_note(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireNote(pylark.GetHireNoteReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_note_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireNoteList(pylark.GetHireNoteListReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_referral_by_application(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireReferralByApplication(
                pylark.GetHireReferralByApplicationReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_job_process_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireJobProcessList(
                pylark.GetHireJobProcessListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_hire_application(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateHireApplication(
                pylark.CreateHireApplicationReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_terminate_hire_application(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.TerminateHireApplication(
                pylark.TerminateHireApplicationReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_application(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireApplication(
                pylark.GetHireApplicationReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_application_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireApplicationList(
                pylark.GetHireApplicationListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_application_interview_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireApplicationInterviewList(
                pylark.GetHireApplicationInterviewListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_offer_by_application(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireOfferByApplication(
                pylark.GetHireOfferByApplicationReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_offer_schema(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireOfferSchema(
                pylark.GetHireOfferSchemaReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_make_hire_transfer_onboard_by_application(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.MakeHireTransferOnboardByApplication(
                pylark.MakeHireTransferOnboardByApplicationReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_hire_employee(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateHireEmployee(
                pylark.UpdateHireEmployeeReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_employee_by_application(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireEmployeeByApplication(
                pylark.GetHireEmployeeByApplicationReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_hire_employee(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetHireEmployee(pylark.GetHireEmployeeReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")
