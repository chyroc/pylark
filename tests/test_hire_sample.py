# Code generated by lark_sdk_gen. DO NOT EDIT.

from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest
from tests.test_helper import mock_get_tenant_access_token_failed


class TestHireSampleRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestHireSampleRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.hire

    def test_request_failed_get_hire_job(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job(pylark.GetHireJobReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_job_manager(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job_manager(pylark.GetHireJobManagerReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_talent(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_talent(pylark.GetHireTalentReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_attachment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_attachment(pylark.GetHireAttachmentReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_attachment_preview(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_attachment_preview(
                pylark.GetHireAttachmentPreviewReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_resume_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_resume_source(pylark.GetHireResumeSourceReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_hire_note(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_hire_note(pylark.CreateHireNoteReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_hire_note(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_hire_note(pylark.UpdateHireNoteReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_note(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_note(pylark.GetHireNoteReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_note_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_note_list(pylark.GetHireNoteListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_referral_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_referral_by_application(
                pylark.GetHireReferralByApplicationReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_job_process_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_job_process_list(pylark.GetHireJobProcessListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_hire_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_hire_application(pylark.CreateHireApplicationReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_terminate_hire_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.terminate_hire_application(
                pylark.TerminateHireApplicationReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application(pylark.GetHireApplicationReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_application_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application_list(
                pylark.GetHireApplicationListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_application_interview_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_application_interview_list(
                pylark.GetHireApplicationInterviewListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_offer_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_offer_by_application(
                pylark.GetHireOfferByApplicationReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_offer_schema(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_offer_schema(pylark.GetHireOfferSchemaReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_make_hire_transfer_onboard_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.make_hire_transfer_onboard_by_application(
                pylark.MakeHireTransferOnboardByApplicationReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_hire_employee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_hire_employee(pylark.UpdateHireEmployeeReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_employee_by_application(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_employee_by_application(
                pylark.GetHireEmployeeByApplicationReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_hire_employee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_hire_employee(pylark.GetHireEmployeeReq())

        assert "msg=failed" in f"{e}"
