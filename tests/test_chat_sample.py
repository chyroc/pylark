# Code generated by lark_sdk_gen. DO NOT EDIT.

import unittest
import pylark
import pytest
from tests.test_conf import app_all_permission, app_no_permission
from tests.test_helper import mock_get_tenant_access_token_failed


def mock(*args, **kwargs):
    raise pylark.PyLarkError(scope="scope", func="func", code=1, msg="mock-failed")


def mock_raw_request(*args, **kwargs):
    raise pylark.PyLarkError(
        scope="scope", func="func", code=1, msg="mock-raw-request-failed"
    )


# mock get token
class TestChatSampleMockGetTokenFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestChatSampleMockGetTokenFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.chat

    def test_mock_get_token_create_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_chat(pylark.CreateChatReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_chat_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_old(pylark.GetChatOldReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat(pylark.GetChatReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_chat(pylark.UpdateChatReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_chat(pylark.DeleteChatReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_chat_list_of_self(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_list_of_self(pylark.GetChatListOfSelfReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_search_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_chat(pylark.SearchChatReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_chat_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_member_list(pylark.GetChatMemberListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_is_in_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.is_in_chat(pylark.IsInChatReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_add_chat_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.add_chat_member(pylark.AddChatMemberReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_chat_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_chat_member(pylark.DeleteChatMemberReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_join_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.join_chat(pylark.JoinChatReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_chat_announcement(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_announcement(pylark.GetChatAnnouncementReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_chat_announcement(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_chat_announcement(pylark.UpdateChatAnnouncementReq())

        assert "msg=failed" in f"{e}"


# mock mock self func
class TestChatSampleMockSelfFuncFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestChatSampleMockSelfFuncFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.chat

    def test_mock_self_func_create_chat(self):
        origin_func = self.module_cli.create_chat
        self.module_cli.create_chat = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_chat(pylark.CreateChatReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_chat = origin_func

    def test_mock_self_func_get_chat_old(self):
        origin_func = self.module_cli.get_chat_old
        self.module_cli.get_chat_old = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_old(pylark.GetChatOldReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_chat_old = origin_func

    def test_mock_self_func_get_chat(self):
        origin_func = self.module_cli.get_chat
        self.module_cli.get_chat = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat(pylark.GetChatReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_chat = origin_func

    def test_mock_self_func_update_chat(self):
        origin_func = self.module_cli.update_chat
        self.module_cli.update_chat = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_chat(pylark.UpdateChatReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_chat = origin_func

    def test_mock_self_func_delete_chat(self):
        origin_func = self.module_cli.delete_chat
        self.module_cli.delete_chat = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_chat(pylark.DeleteChatReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_chat = origin_func

    def test_mock_self_func_get_chat_list_of_self(self):
        origin_func = self.module_cli.get_chat_list_of_self
        self.module_cli.get_chat_list_of_self = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_list_of_self(pylark.GetChatListOfSelfReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_chat_list_of_self = origin_func

    def test_mock_self_func_search_chat(self):
        origin_func = self.module_cli.search_chat
        self.module_cli.search_chat = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_chat(pylark.SearchChatReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.search_chat = origin_func

    def test_mock_self_func_get_chat_member_list(self):
        origin_func = self.module_cli.get_chat_member_list
        self.module_cli.get_chat_member_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_member_list(pylark.GetChatMemberListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_chat_member_list = origin_func

    def test_mock_self_func_is_in_chat(self):
        origin_func = self.module_cli.is_in_chat
        self.module_cli.is_in_chat = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.is_in_chat(pylark.IsInChatReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.is_in_chat = origin_func

    def test_mock_self_func_add_chat_member(self):
        origin_func = self.module_cli.add_chat_member
        self.module_cli.add_chat_member = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.add_chat_member(pylark.AddChatMemberReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.add_chat_member = origin_func

    def test_mock_self_func_delete_chat_member(self):
        origin_func = self.module_cli.delete_chat_member
        self.module_cli.delete_chat_member = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_chat_member(pylark.DeleteChatMemberReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_chat_member = origin_func

    def test_mock_self_func_join_chat(self):
        origin_func = self.module_cli.join_chat
        self.module_cli.join_chat = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.join_chat(pylark.JoinChatReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.join_chat = origin_func

    def test_mock_self_func_get_chat_announcement(self):
        origin_func = self.module_cli.get_chat_announcement
        self.module_cli.get_chat_announcement = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_announcement(pylark.GetChatAnnouncementReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_chat_announcement = origin_func

    def test_mock_self_func_update_chat_announcement(self):
        origin_func = self.module_cli.update_chat_announcement
        self.module_cli.update_chat_announcement = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_chat_announcement(pylark.UpdateChatAnnouncementReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_chat_announcement = origin_func


# mock raw request
class TestChatSampleMockRawRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestChatSampleMockRawRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.chat
        self.cli.raw_request = mock_raw_request

    def test_mock_raw_request_create_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_chat(pylark.CreateChatReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_chat_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_old(pylark.GetChatOldReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat(
                pylark.GetChatReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_chat(
                pylark.UpdateChatReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_chat(
                pylark.DeleteChatReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_chat_list_of_self(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_list_of_self(pylark.GetChatListOfSelfReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_search_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_chat(pylark.SearchChatReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_chat_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_member_list(
                pylark.GetChatMemberListReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_is_in_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.is_in_chat(
                pylark.IsInChatReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_add_chat_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.add_chat_member(
                pylark.AddChatMemberReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_chat_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_chat_member(
                pylark.DeleteChatMemberReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_join_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.join_chat(
                pylark.JoinChatReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_chat_announcement(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_announcement(
                pylark.GetChatAnnouncementReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_chat_announcement(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_chat_announcement(
                pylark.UpdateChatAnnouncementReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg


# real request
class TestChatSampleRealRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestChatSampleRealRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_no_permission.ins()
        self.module_cli = self.cli.chat

    def test_real_request_create_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_chat(pylark.CreateChatReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_chat_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_old(pylark.GetChatOldReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat(
                pylark.GetChatReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_chat(
                pylark.UpdateChatReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_chat(
                pylark.DeleteChatReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_chat_list_of_self(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_list_of_self(pylark.GetChatListOfSelfReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_search_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_chat(pylark.SearchChatReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_chat_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_member_list(
                pylark.GetChatMemberListReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_is_in_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.is_in_chat(
                pylark.IsInChatReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_add_chat_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.add_chat_member(
                pylark.AddChatMemberReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_chat_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_chat_member(
                pylark.DeleteChatMemberReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_join_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.join_chat(
                pylark.JoinChatReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_chat_announcement(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_announcement(
                pylark.GetChatAnnouncementReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_chat_announcement(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_chat_announcement(
                pylark.UpdateChatAnnouncementReq(
                    chat_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
