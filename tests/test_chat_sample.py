# Code generated by lark_sdk_gen. DO NOT EDIT.

from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest
from tests.test_helper import mock_get_tenant_access_token_failed


class TestChatSampleRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestChatSampleRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.chat

    def test_request_failed_create_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_chat(pylark.CreateChatReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat(pylark.GetChatReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_chat(pylark.UpdateChatReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_chat(pylark.DeleteChatReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_chat_list_of_self(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_list_of_self(pylark.GetChatListOfSelfReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_search_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_chat(pylark.SearchChatReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_chat_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_member_list(pylark.GetChatMemberListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_is_in_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.is_in_chat(pylark.IsInChatReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_add_chat_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.add_chat_member(pylark.AddChatMemberReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_chat_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_chat_member(pylark.DeleteChatMemberReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_join_chat(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.join_chat(pylark.JoinChatReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_chat_announcement(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_chat_announcement(pylark.GetChatAnnouncementReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_chat_announcement(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_chat_announcement(pylark.UpdateChatAnnouncementReq())

        assert "msg=failed" in f"{e}"
