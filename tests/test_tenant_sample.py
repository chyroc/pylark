# Code generated by lark_sdk_gen. DO NOT EDIT.

import unittest
import pylark
import pytest
from tests.test_conf import app_all_permission, app_no_permission
from tests.test_helper import mock_get_tenant_access_token_failed


def mock(*args, **kwargs):
    raise pylark.PyLarkError(scope="scope", func="func", code=1, msg="mock-failed")


def mock_raw_request(*args, **kwargs):
    raise pylark.PyLarkError(
        scope="scope", func="func", code=1, msg="mock-raw-request-failed"
    )


# mock get token
class TestTenantSampleMockGetTokenFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestTenantSampleMockGetTokenFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.tenant

    def test_mock_get_token_get_tenant(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_tenant(pylark.GetTenantReq())

        assert "msg=failed" in f"{e}"


# mock mock self func
class TestTenantSampleMockSelfFuncFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestTenantSampleMockSelfFuncFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.tenant

    def test_mock_self_func_get_tenant(self):
        origin_func = self.module_cli.get_tenant
        self.module_cli.get_tenant = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_tenant(pylark.GetTenantReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_tenant = origin_func


# mock raw request
class TestTenantSampleMockRawRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestTenantSampleMockRawRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.tenant
        self.cli.raw_request = mock_raw_request

    def test_mock_raw_request_get_tenant(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_tenant(pylark.GetTenantReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg


# real request
class TestTenantSampleRealRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestTenantSampleRealRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_no_permission.ins()
        self.module_cli = self.cli.tenant

    def test_real_request_get_tenant(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_tenant(pylark.GetTenantReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
