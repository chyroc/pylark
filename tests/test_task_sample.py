# Code generated by lark_sdk_gen. DO NOT EDIT.

from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest
from tests.test_helper import mock_get_tenant_access_token_failed


class TestTaskSampleRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestTaskSampleRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.task

    def test_request_failed_create_task_collaborator(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_collaborator(pylark.CreateTaskCollaboratorReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_task_collaborator_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_collaborator_list(
                pylark.GetTaskCollaboratorListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_task_collaborator(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_collaborator(pylark.DeleteTaskCollaboratorReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_task_follower(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_follower(pylark.CreateTaskFollowerReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_task_follower_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_follower_list(pylark.GetTaskFollowerListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_task_follower(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_follower(pylark.DeleteTaskFollowerReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_task_reminder(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_reminder(pylark.CreateTaskReminderReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_task_reminder_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_reminder_list(pylark.GetTaskReminderListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_task_reminder(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_reminder(pylark.DeleteTaskReminderReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task(pylark.CreateTaskReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task(pylark.GetTaskReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task(pylark.DeleteTaskReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_task(pylark.UpdateTaskReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_complete_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.complete_task(pylark.CompleteTaskReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_uncomplete_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.uncomplete_task(pylark.UncompleteTaskReq())

        assert "msg=failed" in f"{e}"
