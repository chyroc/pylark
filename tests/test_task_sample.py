# Code generated by lark_sdk_gen. DO NOT EDIT.

import unittest
import pylark
import pytest
from tests.test_conf import app_all_permission, app_no_permission
from tests.test_helper import mock_get_tenant_access_token_failed


def mock(*args, **kwargs):
    raise pylark.PyLarkError(scope="scope", func="func", code=1, msg="mock-failed")


def mock_raw_request(*args, **kwargs):
    raise pylark.PyLarkError(
        scope="scope", func="func", code=1, msg="mock-raw-request-failed"
    )


# mock get token
class TestTaskSampleMockGetTokenFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestTaskSampleMockGetTokenFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.task

    def test_mock_get_token_create_task_collaborator(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_collaborator(pylark.CreateTaskCollaboratorReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_task_collaborator_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_collaborator_list(
                pylark.GetTaskCollaboratorListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_task_collaborator(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_collaborator(pylark.DeleteTaskCollaboratorReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_task_follower(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_follower(pylark.CreateTaskFollowerReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_task_follower_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_follower_list(pylark.GetTaskFollowerListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_task_follower(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_follower(pylark.DeleteTaskFollowerReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_task_reminder(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_reminder(pylark.CreateTaskReminderReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_task_reminder_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_reminder_list(pylark.GetTaskReminderListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_task_reminder(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_reminder(pylark.DeleteTaskReminderReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task(pylark.CreateTaskReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task(pylark.GetTaskReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task(pylark.DeleteTaskReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_task(pylark.UpdateTaskReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_complete_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.complete_task(pylark.CompleteTaskReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_uncomplete_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.uncomplete_task(pylark.UncompleteTaskReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_task_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_comment(pylark.CreateTaskCommentReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_task_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_comment(pylark.GetTaskCommentReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_task_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_comment(pylark.DeleteTaskCommentReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_task_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_task_comment(pylark.UpdateTaskCommentReq())

        assert "msg=failed" in f"{e}"


# mock mock self func
class TestTaskSampleMockSelfFuncFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestTaskSampleMockSelfFuncFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.task

    def test_mock_self_func_create_task_collaborator(self):
        origin_func = self.module_cli.create_task_collaborator
        self.module_cli.create_task_collaborator = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_collaborator(pylark.CreateTaskCollaboratorReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_task_collaborator = origin_func

    def test_mock_self_func_get_task_collaborator_list(self):
        origin_func = self.module_cli.get_task_collaborator_list
        self.module_cli.get_task_collaborator_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_collaborator_list(
                pylark.GetTaskCollaboratorListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_task_collaborator_list = origin_func

    def test_mock_self_func_delete_task_collaborator(self):
        origin_func = self.module_cli.delete_task_collaborator
        self.module_cli.delete_task_collaborator = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_collaborator(pylark.DeleteTaskCollaboratorReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_task_collaborator = origin_func

    def test_mock_self_func_create_task_follower(self):
        origin_func = self.module_cli.create_task_follower
        self.module_cli.create_task_follower = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_follower(pylark.CreateTaskFollowerReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_task_follower = origin_func

    def test_mock_self_func_get_task_follower_list(self):
        origin_func = self.module_cli.get_task_follower_list
        self.module_cli.get_task_follower_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_follower_list(pylark.GetTaskFollowerListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_task_follower_list = origin_func

    def test_mock_self_func_delete_task_follower(self):
        origin_func = self.module_cli.delete_task_follower
        self.module_cli.delete_task_follower = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_follower(pylark.DeleteTaskFollowerReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_task_follower = origin_func

    def test_mock_self_func_create_task_reminder(self):
        origin_func = self.module_cli.create_task_reminder
        self.module_cli.create_task_reminder = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_reminder(pylark.CreateTaskReminderReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_task_reminder = origin_func

    def test_mock_self_func_get_task_reminder_list(self):
        origin_func = self.module_cli.get_task_reminder_list
        self.module_cli.get_task_reminder_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_reminder_list(pylark.GetTaskReminderListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_task_reminder_list = origin_func

    def test_mock_self_func_delete_task_reminder(self):
        origin_func = self.module_cli.delete_task_reminder
        self.module_cli.delete_task_reminder = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_reminder(pylark.DeleteTaskReminderReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_task_reminder = origin_func

    def test_mock_self_func_create_task(self):
        origin_func = self.module_cli.create_task
        self.module_cli.create_task = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task(pylark.CreateTaskReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_task = origin_func

    def test_mock_self_func_get_task(self):
        origin_func = self.module_cli.get_task
        self.module_cli.get_task = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task(pylark.GetTaskReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_task = origin_func

    def test_mock_self_func_delete_task(self):
        origin_func = self.module_cli.delete_task
        self.module_cli.delete_task = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task(pylark.DeleteTaskReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_task = origin_func

    def test_mock_self_func_update_task(self):
        origin_func = self.module_cli.update_task
        self.module_cli.update_task = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_task(pylark.UpdateTaskReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_task = origin_func

    def test_mock_self_func_complete_task(self):
        origin_func = self.module_cli.complete_task
        self.module_cli.complete_task = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.complete_task(pylark.CompleteTaskReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.complete_task = origin_func

    def test_mock_self_func_uncomplete_task(self):
        origin_func = self.module_cli.uncomplete_task
        self.module_cli.uncomplete_task = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.uncomplete_task(pylark.UncompleteTaskReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.uncomplete_task = origin_func

    def test_mock_self_func_create_task_comment(self):
        origin_func = self.module_cli.create_task_comment
        self.module_cli.create_task_comment = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_comment(pylark.CreateTaskCommentReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_task_comment = origin_func

    def test_mock_self_func_get_task_comment(self):
        origin_func = self.module_cli.get_task_comment
        self.module_cli.get_task_comment = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_comment(pylark.GetTaskCommentReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_task_comment = origin_func

    def test_mock_self_func_delete_task_comment(self):
        origin_func = self.module_cli.delete_task_comment
        self.module_cli.delete_task_comment = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_comment(pylark.DeleteTaskCommentReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_task_comment = origin_func

    def test_mock_self_func_update_task_comment(self):
        origin_func = self.module_cli.update_task_comment
        self.module_cli.update_task_comment = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_task_comment(pylark.UpdateTaskCommentReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_task_comment = origin_func


# mock raw request
class TestTaskSampleMockRawRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestTaskSampleMockRawRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.task
        self.cli.raw_request = mock_raw_request

    def test_mock_raw_request_create_task_collaborator(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_collaborator(
                pylark.CreateTaskCollaboratorReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_task_collaborator_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_collaborator_list(
                pylark.GetTaskCollaboratorListReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_task_collaborator(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_collaborator(
                pylark.DeleteTaskCollaboratorReq(
                    task_id="x",
                    collaborator_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_task_follower(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_follower(
                pylark.CreateTaskFollowerReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_task_follower_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_follower_list(
                pylark.GetTaskFollowerListReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_task_follower(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_follower(
                pylark.DeleteTaskFollowerReq(
                    task_id="x",
                    follower_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_task_reminder(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_reminder(
                pylark.CreateTaskReminderReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_task_reminder_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_reminder_list(
                pylark.GetTaskReminderListReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_task_reminder(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_reminder(
                pylark.DeleteTaskReminderReq(
                    task_id="x",
                    reminder_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task(pylark.CreateTaskReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task(
                pylark.GetTaskReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task(
                pylark.DeleteTaskReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_task(
                pylark.UpdateTaskReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_complete_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.complete_task(
                pylark.CompleteTaskReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_uncomplete_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.uncomplete_task(
                pylark.UncompleteTaskReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_task_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_comment(
                pylark.CreateTaskCommentReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_task_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_comment(
                pylark.GetTaskCommentReq(
                    task_id="x",
                    comment_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_task_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_comment(
                pylark.DeleteTaskCommentReq(
                    task_id="x",
                    comment_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_task_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_task_comment(
                pylark.UpdateTaskCommentReq(
                    task_id="x",
                    comment_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg


# real request
class TestTaskSampleRealRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestTaskSampleRealRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_no_permission.ins()
        self.module_cli = self.cli.task

    def test_real_request_create_task_collaborator(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_collaborator(
                pylark.CreateTaskCollaboratorReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_task_collaborator_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_collaborator_list(
                pylark.GetTaskCollaboratorListReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_task_collaborator(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_collaborator(
                pylark.DeleteTaskCollaboratorReq(
                    task_id="x",
                    collaborator_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_task_follower(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_follower(
                pylark.CreateTaskFollowerReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_task_follower_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_follower_list(
                pylark.GetTaskFollowerListReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_task_follower(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_follower(
                pylark.DeleteTaskFollowerReq(
                    task_id="x",
                    follower_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_task_reminder(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_reminder(
                pylark.CreateTaskReminderReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_task_reminder_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_reminder_list(
                pylark.GetTaskReminderListReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_task_reminder(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_reminder(
                pylark.DeleteTaskReminderReq(
                    task_id="x",
                    reminder_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task(pylark.CreateTaskReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task(
                pylark.GetTaskReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task(
                pylark.DeleteTaskReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_task(
                pylark.UpdateTaskReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_complete_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.complete_task(
                pylark.CompleteTaskReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_uncomplete_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.uncomplete_task(
                pylark.UncompleteTaskReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_task_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_task_comment(
                pylark.CreateTaskCommentReq(
                    task_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_task_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_task_comment(
                pylark.GetTaskCommentReq(
                    task_id="x",
                    comment_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_task_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_task_comment(
                pylark.DeleteTaskCommentReq(
                    task_id="x",
                    comment_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_task_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_task_comment(
                pylark.UpdateTaskCommentReq(
                    task_id="x",
                    comment_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
