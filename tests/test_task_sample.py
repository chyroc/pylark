# Code generated by lark_sdk_gen. DO NOT EDIT.

from pylark.log import logger
from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest


class Test_Task_Sample_RequestFailed(unittest.TestCase):
    def __init__(self):
        super().__init__()
        self.cli = app_all_permission.ins()
        # self.cli.mock().MockGetTenantAccessToken(mockGetTenantAccessTokenFailed)
        # self.cli.mock().MockGetAppAccessToken(mockGetTenantAccessTokenFailed)
        self.module_cli = self.cli.task

    def test_request_failed_create_task_collaborator(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateTaskCollaborator(
                pylark.CreateTaskCollaboratorReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_task_collaborator_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetTaskCollaboratorList(
                pylark.GetTaskCollaboratorListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_task_collaborator(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteTaskCollaborator(
                pylark.DeleteTaskCollaboratorReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_task_follower(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateTaskFollower(
                pylark.CreateTaskFollowerReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_task_follower_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetTaskFollowerList(
                pylark.GetTaskFollowerListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_task_follower(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteTaskFollower(
                pylark.DeleteTaskFollowerReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_task_reminder(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateTaskReminder(
                pylark.CreateTaskReminderReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_task_reminder_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetTaskReminderList(
                pylark.GetTaskReminderListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_task_reminder(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteTaskReminder(
                pylark.DeleteTaskReminderReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_task(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateTask(pylark.CreateTaskReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_task(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetTask(pylark.GetTaskReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_task(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteTask(pylark.DeleteTaskReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_task(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateTask(pylark.UpdateTaskReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_complete_task(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CompleteTask(pylark.CompleteTaskReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_uncomplete_task(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UncompleteTask(pylark.UncompleteTaskReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")
