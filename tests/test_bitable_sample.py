# Code generated by lark_sdk_gen. DO NOT EDIT.

from pylark.log import logger
from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest


class Test_Bitable_Sample_RequestFailed(unittest.TestCase):
    def __init__(self):
        super().__init__()
        self.cli = app_all_permission.ins()
        # self.cli.mock().MockGetTenantAccessToken(mockGetTenantAccessTokenFailed)
        # self.cli.mock().MockGetAppAccessToken(mockGetTenantAccessTokenFailed)
        self.module_cli = self.cli.bitable

    def test_request_failed_get_bitable_view_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetBitableViewList(
                pylark.GetBitableViewListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_bitable_view(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateBitableView(
                pylark.CreateBitableViewReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_bitable_view(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteBitableView(
                pylark.DeleteBitableViewReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_bitable_record_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetBitableRecordList(
                pylark.GetBitableRecordListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_bitable_record(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetBitableRecord(
                pylark.GetBitableRecordReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_bitable_record(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateBitableRecord(
                pylark.CreateBitableRecordReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_batch_create_bitable_record(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.BatchCreateBitableRecord(
                pylark.BatchCreateBitableRecordReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_bitable_record(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateBitableRecord(
                pylark.UpdateBitableRecordReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_batch_update_bitable_record(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.BatchUpdateBitableRecord(
                pylark.BatchUpdateBitableRecordReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_bitable_record(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteBitableRecord(
                pylark.DeleteBitableRecordReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_batch_delete_bitable_record(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.BatchDeleteBitableRecord(
                pylark.BatchDeleteBitableRecordReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_bitable_field_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetBitableFieldList(
                pylark.GetBitableFieldListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_bitable_field(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateBitableField(
                pylark.CreateBitableFieldReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_bitable_field(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateBitableField(
                pylark.UpdateBitableFieldReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_bitable_field(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteBitableField(
                pylark.DeleteBitableFieldReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_bitable_table_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetBitableTableList(
                pylark.GetBitableTableListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_bitable_table(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateBitableTable(
                pylark.CreateBitableTableReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_batch_create_bitable_table(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.BatchCreateBitableTable(
                pylark.BatchCreateBitableTableReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_bitable_table(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteBitableTable(
                pylark.DeleteBitableTableReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_batch_delete_bitable_table(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.BatchDeleteBitableTable(
                pylark.BatchDeleteBitableTableReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_bitable_meta(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetBitableMeta(pylark.GetBitableMetaReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")
