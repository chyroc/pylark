# Code generated by lark_sdk_gen. DO NOT EDIT.

from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest
from tests.test_helper import mock_get_tenant_access_token_failed


class TestBitableSampleRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestBitableSampleRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.bitable

    def test_request_failed_get_bitable_view_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_view_list(pylark.GetBitableViewListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_bitable_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_view(pylark.CreateBitableViewReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_bitable_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_view(pylark.DeleteBitableViewReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_bitable_record_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_record_list(pylark.GetBitableRecordListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_record(pylark.GetBitableRecordReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_record(pylark.CreateBitableRecordReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_create_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_create_bitable_record(
                pylark.BatchCreateBitableRecordReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_bitable_record(pylark.UpdateBitableRecordReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_update_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_update_bitable_record(
                pylark.BatchUpdateBitableRecordReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_record(pylark.DeleteBitableRecordReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_delete_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_delete_bitable_record(
                pylark.BatchDeleteBitableRecordReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_bitable_field_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_field_list(pylark.GetBitableFieldListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_bitable_field(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_field(pylark.CreateBitableFieldReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_bitable_field(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_bitable_field(pylark.UpdateBitableFieldReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_bitable_field(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_field(pylark.DeleteBitableFieldReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_bitable_table_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_table_list(pylark.GetBitableTableListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_table(pylark.CreateBitableTableReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_create_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_create_bitable_table(
                pylark.BatchCreateBitableTableReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_table(pylark.DeleteBitableTableReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_delete_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_delete_bitable_table(
                pylark.BatchDeleteBitableTableReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_bitable_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_meta(pylark.GetBitableMetaReq())

        assert "msg=failed" in f"{e}"
