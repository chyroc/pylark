# Code generated by lark_sdk_gen. DO NOT EDIT.

import unittest
import pylark
import pytest
from tests.test_conf import app_all_permission, app_no_permission
from tests.test_helper import mock_get_tenant_access_token_failed


def mock(*args, **kwargs):
    raise pylark.PyLarkError(scope="scope", func="func", code=1, msg="mock-failed")


def mock_raw_request(*args, **kwargs):
    raise pylark.PyLarkError(
        scope="scope", func="func", code=1, msg="mock-raw-request-failed"
    )


# mock get token
class TestBitableSampleMockGetTokenFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestBitableSampleMockGetTokenFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.bitable

    def test_mock_get_token_get_bitable_view_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_view_list(pylark.GetBitableViewListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_bitable_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_view(pylark.CreateBitableViewReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_bitable_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_view(pylark.DeleteBitableViewReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_bitable_record_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_record_list(pylark.GetBitableRecordListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_record(pylark.GetBitableRecordReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_record(pylark.CreateBitableRecordReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_create_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_create_bitable_record(
                pylark.BatchCreateBitableRecordReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_bitable_record(pylark.UpdateBitableRecordReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_update_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_update_bitable_record(
                pylark.BatchUpdateBitableRecordReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_record(pylark.DeleteBitableRecordReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_delete_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_delete_bitable_record(
                pylark.BatchDeleteBitableRecordReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_bitable_field_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_field_list(pylark.GetBitableFieldListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_bitable_field(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_field(pylark.CreateBitableFieldReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_bitable_field(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_bitable_field(pylark.UpdateBitableFieldReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_bitable_field(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_field(pylark.DeleteBitableFieldReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_bitable_table_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_table_list(pylark.GetBitableTableListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_table(pylark.CreateBitableTableReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_create_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_create_bitable_table(
                pylark.BatchCreateBitableTableReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_table(pylark.DeleteBitableTableReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_delete_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_delete_bitable_table(
                pylark.BatchDeleteBitableTableReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_bitable_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_meta(pylark.GetBitableMetaReq())

        assert "msg=failed" in f"{e}"


# mock mock self func
class TestBitableSampleMockSelfFuncFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestBitableSampleMockSelfFuncFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.bitable

    def test_mock_self_func_get_bitable_view_list(self):
        origin_func = self.module_cli.get_bitable_view_list
        self.module_cli.get_bitable_view_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_view_list(pylark.GetBitableViewListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_bitable_view_list = origin_func

    def test_mock_self_func_create_bitable_view(self):
        origin_func = self.module_cli.create_bitable_view
        self.module_cli.create_bitable_view = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_view(pylark.CreateBitableViewReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_bitable_view = origin_func

    def test_mock_self_func_delete_bitable_view(self):
        origin_func = self.module_cli.delete_bitable_view
        self.module_cli.delete_bitable_view = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_view(pylark.DeleteBitableViewReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_bitable_view = origin_func

    def test_mock_self_func_get_bitable_record_list(self):
        origin_func = self.module_cli.get_bitable_record_list
        self.module_cli.get_bitable_record_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_record_list(pylark.GetBitableRecordListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_bitable_record_list = origin_func

    def test_mock_self_func_get_bitable_record(self):
        origin_func = self.module_cli.get_bitable_record
        self.module_cli.get_bitable_record = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_record(pylark.GetBitableRecordReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_bitable_record = origin_func

    def test_mock_self_func_create_bitable_record(self):
        origin_func = self.module_cli.create_bitable_record
        self.module_cli.create_bitable_record = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_record(pylark.CreateBitableRecordReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_bitable_record = origin_func

    def test_mock_self_func_batch_create_bitable_record(self):
        origin_func = self.module_cli.batch_create_bitable_record
        self.module_cli.batch_create_bitable_record = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_create_bitable_record(
                pylark.BatchCreateBitableRecordReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_create_bitable_record = origin_func

    def test_mock_self_func_update_bitable_record(self):
        origin_func = self.module_cli.update_bitable_record
        self.module_cli.update_bitable_record = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_bitable_record(pylark.UpdateBitableRecordReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_bitable_record = origin_func

    def test_mock_self_func_batch_update_bitable_record(self):
        origin_func = self.module_cli.batch_update_bitable_record
        self.module_cli.batch_update_bitable_record = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_update_bitable_record(
                pylark.BatchUpdateBitableRecordReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_update_bitable_record = origin_func

    def test_mock_self_func_delete_bitable_record(self):
        origin_func = self.module_cli.delete_bitable_record
        self.module_cli.delete_bitable_record = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_record(pylark.DeleteBitableRecordReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_bitable_record = origin_func

    def test_mock_self_func_batch_delete_bitable_record(self):
        origin_func = self.module_cli.batch_delete_bitable_record
        self.module_cli.batch_delete_bitable_record = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_delete_bitable_record(
                pylark.BatchDeleteBitableRecordReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_delete_bitable_record = origin_func

    def test_mock_self_func_get_bitable_field_list(self):
        origin_func = self.module_cli.get_bitable_field_list
        self.module_cli.get_bitable_field_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_field_list(pylark.GetBitableFieldListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_bitable_field_list = origin_func

    def test_mock_self_func_create_bitable_field(self):
        origin_func = self.module_cli.create_bitable_field
        self.module_cli.create_bitable_field = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_field(pylark.CreateBitableFieldReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_bitable_field = origin_func

    def test_mock_self_func_update_bitable_field(self):
        origin_func = self.module_cli.update_bitable_field
        self.module_cli.update_bitable_field = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_bitable_field(pylark.UpdateBitableFieldReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_bitable_field = origin_func

    def test_mock_self_func_delete_bitable_field(self):
        origin_func = self.module_cli.delete_bitable_field
        self.module_cli.delete_bitable_field = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_field(pylark.DeleteBitableFieldReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_bitable_field = origin_func

    def test_mock_self_func_get_bitable_table_list(self):
        origin_func = self.module_cli.get_bitable_table_list
        self.module_cli.get_bitable_table_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_table_list(pylark.GetBitableTableListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_bitable_table_list = origin_func

    def test_mock_self_func_create_bitable_table(self):
        origin_func = self.module_cli.create_bitable_table
        self.module_cli.create_bitable_table = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_table(pylark.CreateBitableTableReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_bitable_table = origin_func

    def test_mock_self_func_batch_create_bitable_table(self):
        origin_func = self.module_cli.batch_create_bitable_table
        self.module_cli.batch_create_bitable_table = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_create_bitable_table(
                pylark.BatchCreateBitableTableReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_create_bitable_table = origin_func

    def test_mock_self_func_delete_bitable_table(self):
        origin_func = self.module_cli.delete_bitable_table
        self.module_cli.delete_bitable_table = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_table(pylark.DeleteBitableTableReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_bitable_table = origin_func

    def test_mock_self_func_batch_delete_bitable_table(self):
        origin_func = self.module_cli.batch_delete_bitable_table
        self.module_cli.batch_delete_bitable_table = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_delete_bitable_table(
                pylark.BatchDeleteBitableTableReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_delete_bitable_table = origin_func

    def test_mock_self_func_get_bitable_meta(self):
        origin_func = self.module_cli.get_bitable_meta
        self.module_cli.get_bitable_meta = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_meta(pylark.GetBitableMetaReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_bitable_meta = origin_func


# mock raw request
class TestBitableSampleMockRawRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestBitableSampleMockRawRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.bitable
        self.cli.raw_request = mock_raw_request

    def test_mock_raw_request_get_bitable_view_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_view_list(
                pylark.GetBitableViewListReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_bitable_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_view(
                pylark.CreateBitableViewReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_bitable_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_view(
                pylark.DeleteBitableViewReq(
                    app_token="x",
                    table_id="x",
                    view_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_bitable_record_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_record_list(
                pylark.GetBitableRecordListReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_record(
                pylark.GetBitableRecordReq(
                    app_token="x",
                    table_id="x",
                    record_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_record(
                pylark.CreateBitableRecordReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_create_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_create_bitable_record(
                pylark.BatchCreateBitableRecordReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_bitable_record(
                pylark.UpdateBitableRecordReq(
                    app_token="x",
                    table_id="x",
                    record_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_update_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_update_bitable_record(
                pylark.BatchUpdateBitableRecordReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_record(
                pylark.DeleteBitableRecordReq(
                    app_token="x",
                    table_id="x",
                    record_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_delete_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_delete_bitable_record(
                pylark.BatchDeleteBitableRecordReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_bitable_field_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_field_list(
                pylark.GetBitableFieldListReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_bitable_field(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_field(
                pylark.CreateBitableFieldReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_bitable_field(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_bitable_field(
                pylark.UpdateBitableFieldReq(
                    app_token="x",
                    table_id="x",
                    field_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_bitable_field(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_field(
                pylark.DeleteBitableFieldReq(
                    app_token="x",
                    table_id="x",
                    field_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_bitable_table_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_table_list(
                pylark.GetBitableTableListReq(
                    app_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_table(
                pylark.CreateBitableTableReq(
                    app_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_create_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_create_bitable_table(
                pylark.BatchCreateBitableTableReq(
                    app_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_table(
                pylark.DeleteBitableTableReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_delete_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_delete_bitable_table(
                pylark.BatchDeleteBitableTableReq(
                    app_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_bitable_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_meta(
                pylark.GetBitableMetaReq(
                    app_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg


# real request
class TestBitableSampleRealRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestBitableSampleRealRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_no_permission.ins()
        self.module_cli = self.cli.bitable

    def test_real_request_get_bitable_view_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_view_list(
                pylark.GetBitableViewListReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_bitable_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_view(
                pylark.CreateBitableViewReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_bitable_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_view(
                pylark.DeleteBitableViewReq(
                    app_token="x",
                    table_id="x",
                    view_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_bitable_record_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_record_list(
                pylark.GetBitableRecordListReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_record(
                pylark.GetBitableRecordReq(
                    app_token="x",
                    table_id="x",
                    record_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_record(
                pylark.CreateBitableRecordReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_create_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_create_bitable_record(
                pylark.BatchCreateBitableRecordReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_bitable_record(
                pylark.UpdateBitableRecordReq(
                    app_token="x",
                    table_id="x",
                    record_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_update_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_update_bitable_record(
                pylark.BatchUpdateBitableRecordReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_record(
                pylark.DeleteBitableRecordReq(
                    app_token="x",
                    table_id="x",
                    record_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_delete_bitable_record(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_delete_bitable_record(
                pylark.BatchDeleteBitableRecordReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_bitable_field_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_field_list(
                pylark.GetBitableFieldListReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_bitable_field(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_field(
                pylark.CreateBitableFieldReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_bitable_field(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_bitable_field(
                pylark.UpdateBitableFieldReq(
                    app_token="x",
                    table_id="x",
                    field_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_bitable_field(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_field(
                pylark.DeleteBitableFieldReq(
                    app_token="x",
                    table_id="x",
                    field_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_bitable_table_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_table_list(
                pylark.GetBitableTableListReq(
                    app_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_bitable_table(
                pylark.CreateBitableTableReq(
                    app_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_create_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_create_bitable_table(
                pylark.BatchCreateBitableTableReq(
                    app_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_bitable_table(
                pylark.DeleteBitableTableReq(
                    app_token="x",
                    table_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_delete_bitable_table(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_delete_bitable_table(
                pylark.BatchDeleteBitableTableReq(
                    app_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_bitable_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_bitable_meta(
                pylark.GetBitableMetaReq(
                    app_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
