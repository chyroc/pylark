# Code generated by lark_sdk_gen. DO NOT EDIT.

from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest
from tests.test_helper import mock_get_tenant_access_token_failed


class TestApprovalSampleRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestApprovalSampleRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.approval

    def test_request_failed_get_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval(pylark.GetApprovalReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_approval_instance_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval_instance_list(
                pylark.GetApprovalInstanceListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval_instance(pylark.GetApprovalInstanceReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_approval_instance(pylark.CreateApprovalInstanceReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_approve_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.approve_approval_instance(
                pylark.ApproveApprovalInstanceReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_reject_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.reject_approval_instance(pylark.RejectApprovalInstanceReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_transfer_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.transfer_approval_instance(
                pylark.TransferApprovalInstanceReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_cancel_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.cancel_approval_instance(pylark.CancelApprovalInstanceReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_upload_approval_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_approval_file(pylark.UploadApprovalFileReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_search_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_instance(pylark.SearchApprovalInstanceReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_search_approval_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_task(pylark.SearchApprovalTaskReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_search_approval_carbon_copy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_carbon_copy(
                pylark.SearchApprovalCarbonCopyReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_approval_carbon_copy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_approval_carbon_copy(
                pylark.CreateApprovalCarbonCopyReq()
            )

        assert "msg=failed" in f"{e}"
