# Code generated by lark_sdk_gen. DO NOT EDIT.

import unittest
import pylark
import pytest
from tests.test_conf import app_all_permission, app_no_permission
from tests.test_helper import mock_get_tenant_access_token_failed


def mock(*args, **kwargs):
    raise pylark.PyLarkError(scope="scope", func="func", code=1, msg="mock-failed")


def mock_raw_request(*args, **kwargs):
    raise pylark.PyLarkError(
        scope="scope", func="func", code=1, msg="mock-raw-request-failed"
    )


# mock get token
class TestApprovalSampleMockGetTokenFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestApprovalSampleMockGetTokenFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.approval

    def test_mock_get_token_get_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval(pylark.GetApprovalReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_approval_instance_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval_instance_list(
                pylark.GetApprovalInstanceListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval_instance(pylark.GetApprovalInstanceReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_approval_instance(pylark.CreateApprovalInstanceReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_approve_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.approve_approval_instance(
                pylark.ApproveApprovalInstanceReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_reject_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.reject_approval_instance(pylark.RejectApprovalInstanceReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_transfer_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.transfer_approval_instance(
                pylark.TransferApprovalInstanceReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_cancel_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.cancel_approval_instance(pylark.CancelApprovalInstanceReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_search_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_instance(pylark.SearchApprovalInstanceReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_add_approval_instance_sign(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.add_approval_instance_sign(
                pylark.AddApprovalInstanceSignReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_upload_approval_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_approval_file(pylark.UploadApprovalFileReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_search_approval_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_task(pylark.SearchApprovalTaskReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_approval_user_task_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval_user_task_list(
                pylark.GetApprovalUserTaskListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_search_approval_carbon_copy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_carbon_copy(
                pylark.SearchApprovalCarbonCopyReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_approval_carbon_copy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_approval_carbon_copy(
                pylark.CreateApprovalCarbonCopyReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_preview_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.preview_approval_instance(
                pylark.PreviewApprovalInstanceReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_approval_message(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_approval_message(pylark.UpdateApprovalMessageReq())

        assert "msg=failed" in f"{e}"


# mock mock self func
class TestApprovalSampleMockSelfFuncFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestApprovalSampleMockSelfFuncFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.approval

    def test_mock_self_func_get_approval(self):
        origin_func = self.module_cli.get_approval
        self.module_cli.get_approval = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval(pylark.GetApprovalReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_approval = origin_func

    def test_mock_self_func_get_approval_instance_list(self):
        origin_func = self.module_cli.get_approval_instance_list
        self.module_cli.get_approval_instance_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval_instance_list(
                pylark.GetApprovalInstanceListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_approval_instance_list = origin_func

    def test_mock_self_func_get_approval_instance(self):
        origin_func = self.module_cli.get_approval_instance
        self.module_cli.get_approval_instance = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval_instance(pylark.GetApprovalInstanceReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_approval_instance = origin_func

    def test_mock_self_func_create_approval_instance(self):
        origin_func = self.module_cli.create_approval_instance
        self.module_cli.create_approval_instance = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_approval_instance(pylark.CreateApprovalInstanceReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_approval_instance = origin_func

    def test_mock_self_func_approve_approval_instance(self):
        origin_func = self.module_cli.approve_approval_instance
        self.module_cli.approve_approval_instance = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.approve_approval_instance(
                pylark.ApproveApprovalInstanceReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.approve_approval_instance = origin_func

    def test_mock_self_func_reject_approval_instance(self):
        origin_func = self.module_cli.reject_approval_instance
        self.module_cli.reject_approval_instance = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.reject_approval_instance(pylark.RejectApprovalInstanceReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.reject_approval_instance = origin_func

    def test_mock_self_func_transfer_approval_instance(self):
        origin_func = self.module_cli.transfer_approval_instance
        self.module_cli.transfer_approval_instance = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.transfer_approval_instance(
                pylark.TransferApprovalInstanceReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.transfer_approval_instance = origin_func

    def test_mock_self_func_cancel_approval_instance(self):
        origin_func = self.module_cli.cancel_approval_instance
        self.module_cli.cancel_approval_instance = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.cancel_approval_instance(pylark.CancelApprovalInstanceReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.cancel_approval_instance = origin_func

    def test_mock_self_func_search_approval_instance(self):
        origin_func = self.module_cli.search_approval_instance
        self.module_cli.search_approval_instance = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_instance(pylark.SearchApprovalInstanceReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.search_approval_instance = origin_func

    def test_mock_self_func_add_approval_instance_sign(self):
        origin_func = self.module_cli.add_approval_instance_sign
        self.module_cli.add_approval_instance_sign = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.add_approval_instance_sign(
                pylark.AddApprovalInstanceSignReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.add_approval_instance_sign = origin_func

    def test_mock_self_func_upload_approval_file(self):
        origin_func = self.module_cli.upload_approval_file
        self.module_cli.upload_approval_file = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_approval_file(pylark.UploadApprovalFileReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.upload_approval_file = origin_func

    def test_mock_self_func_search_approval_task(self):
        origin_func = self.module_cli.search_approval_task
        self.module_cli.search_approval_task = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_task(pylark.SearchApprovalTaskReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.search_approval_task = origin_func

    def test_mock_self_func_get_approval_user_task_list(self):
        origin_func = self.module_cli.get_approval_user_task_list
        self.module_cli.get_approval_user_task_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval_user_task_list(
                pylark.GetApprovalUserTaskListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_approval_user_task_list = origin_func

    def test_mock_self_func_search_approval_carbon_copy(self):
        origin_func = self.module_cli.search_approval_carbon_copy
        self.module_cli.search_approval_carbon_copy = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_carbon_copy(
                pylark.SearchApprovalCarbonCopyReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.search_approval_carbon_copy = origin_func

    def test_mock_self_func_create_approval_carbon_copy(self):
        origin_func = self.module_cli.create_approval_carbon_copy
        self.module_cli.create_approval_carbon_copy = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_approval_carbon_copy(
                pylark.CreateApprovalCarbonCopyReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_approval_carbon_copy = origin_func

    def test_mock_self_func_preview_approval_instance(self):
        origin_func = self.module_cli.preview_approval_instance
        self.module_cli.preview_approval_instance = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.preview_approval_instance(
                pylark.PreviewApprovalInstanceReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.preview_approval_instance = origin_func

    def test_mock_self_func_update_approval_message(self):
        origin_func = self.module_cli.update_approval_message
        self.module_cli.update_approval_message = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_approval_message(pylark.UpdateApprovalMessageReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_approval_message = origin_func


# mock raw request
class TestApprovalSampleMockRawRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestApprovalSampleMockRawRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.approval
        self.cli.raw_request = mock_raw_request

    def test_mock_raw_request_get_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval(pylark.GetApprovalReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_approval_instance_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval_instance_list(
                pylark.GetApprovalInstanceListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval_instance(pylark.GetApprovalInstanceReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_approval_instance(pylark.CreateApprovalInstanceReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_approve_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.approve_approval_instance(
                pylark.ApproveApprovalInstanceReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_reject_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.reject_approval_instance(pylark.RejectApprovalInstanceReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_transfer_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.transfer_approval_instance(
                pylark.TransferApprovalInstanceReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_cancel_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.cancel_approval_instance(pylark.CancelApprovalInstanceReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_search_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_instance(pylark.SearchApprovalInstanceReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_add_approval_instance_sign(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.add_approval_instance_sign(
                pylark.AddApprovalInstanceSignReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_upload_approval_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_approval_file(pylark.UploadApprovalFileReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_search_approval_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_task(pylark.SearchApprovalTaskReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_approval_user_task_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval_user_task_list(
                pylark.GetApprovalUserTaskListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_search_approval_carbon_copy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_carbon_copy(
                pylark.SearchApprovalCarbonCopyReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_approval_carbon_copy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_approval_carbon_copy(
                pylark.CreateApprovalCarbonCopyReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_preview_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.preview_approval_instance(
                pylark.PreviewApprovalInstanceReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_approval_message(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_approval_message(pylark.UpdateApprovalMessageReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg


# real request
class TestApprovalSampleRealRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestApprovalSampleRealRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_no_permission.ins()
        self.module_cli = self.cli.approval

    def test_real_request_get_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval(pylark.GetApprovalReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_approval_instance_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval_instance_list(
                pylark.GetApprovalInstanceListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval_instance(pylark.GetApprovalInstanceReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_approval_instance(pylark.CreateApprovalInstanceReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_approve_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.approve_approval_instance(
                pylark.ApproveApprovalInstanceReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_reject_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.reject_approval_instance(pylark.RejectApprovalInstanceReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_transfer_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.transfer_approval_instance(
                pylark.TransferApprovalInstanceReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_cancel_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.cancel_approval_instance(pylark.CancelApprovalInstanceReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_search_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_instance(pylark.SearchApprovalInstanceReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_add_approval_instance_sign(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.add_approval_instance_sign(
                pylark.AddApprovalInstanceSignReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_upload_approval_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_approval_file(pylark.UploadApprovalFileReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_search_approval_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_task(pylark.SearchApprovalTaskReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_approval_user_task_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_approval_user_task_list(
                pylark.GetApprovalUserTaskListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_search_approval_carbon_copy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_approval_carbon_copy(
                pylark.SearchApprovalCarbonCopyReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_approval_carbon_copy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_approval_carbon_copy(
                pylark.CreateApprovalCarbonCopyReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_preview_approval_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.preview_approval_instance(
                pylark.PreviewApprovalInstanceReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_approval_message(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_approval_message(pylark.UpdateApprovalMessageReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
