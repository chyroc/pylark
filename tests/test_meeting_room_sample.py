# Code generated by lark_sdk_gen. DO NOT EDIT.

from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest
from tests.test_helper import mock_get_tenant_access_token_failed


class TestMeetingRoomSampleRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestMeetingRoomSampleRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.meeting_room

    def test_request_failed_batch_get_meeting_room_summary(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_summary(
                pylark.BatchGetMeetingRoomSummaryReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_meeting_room_building_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_building_list(
                pylark.GetMeetingRoomBuildingListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_get_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_building(
                pylark.BatchGetMeetingRoomBuildingReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_meeting_room_room_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_room_list(
                pylark.GetMeetingRoomRoomListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_get_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_room(
                pylark.BatchGetMeetingRoomRoomReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_get_meeting_room_freebusy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_freebusy(
                pylark.BatchGetMeetingRoomFreebusyReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_reply_meeting_room_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.reply_meeting_room_instance(
                pylark.ReplyMeetingRoomInstanceReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_meeting_room_building(
                pylark.CreateMeetingRoomBuildingReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_meeting_room_building(
                pylark.UpdateMeetingRoomBuildingReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_meeting_room_building(
                pylark.DeleteMeetingRoomBuildingReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_get_meeting_room_building_id(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_building_id(
                pylark.BatchGetMeetingRoomBuildingIDReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_meeting_room_room(pylark.CreateMeetingRoomRoomReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_meeting_room_room(pylark.UpdateMeetingRoomRoomReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_meeting_room_room(pylark.DeleteMeetingRoomRoomReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_get_meeting_room_room_id(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_room_id(
                pylark.BatchGetMeetingRoomRoomIDReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_meeting_room_country_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_country_list(
                pylark.GetMeetingRoomCountryListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_meeting_room_district_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_district_list(
                pylark.GetMeetingRoomDistrictListReq()
            )

        assert "msg=failed" in f"{e}"
