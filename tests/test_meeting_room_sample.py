# Code generated by lark_sdk_gen. DO NOT EDIT.

import unittest
import pylark
import pytest
from tests.test_conf import app_all_permission, app_no_permission
from tests.test_helper import mock_get_tenant_access_token_failed


def mock(*args, **kwargs):
    raise pylark.PyLarkError(scope="scope", func="func", code=1, msg="mock-failed")


def mock_raw_request(*args, **kwargs):
    raise pylark.PyLarkError(
        scope="scope", func="func", code=1, msg="mock-raw-request-failed"
    )


# mock get token
class TestMeetingRoomSampleMockGetTokenFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestMeetingRoomSampleMockGetTokenFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.meeting_room

    def test_mock_get_token_batch_get_meeting_room_summary(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_summary(
                pylark.BatchGetMeetingRoomSummaryReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_meeting_room_building_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_building_list(
                pylark.GetMeetingRoomBuildingListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_get_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_building(
                pylark.BatchGetMeetingRoomBuildingReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_meeting_room_room_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_room_list(
                pylark.GetMeetingRoomRoomListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_get_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_room(
                pylark.BatchGetMeetingRoomRoomReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_get_meeting_room_freebusy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_freebusy(
                pylark.BatchGetMeetingRoomFreebusyReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_reply_meeting_room_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.reply_meeting_room_instance(
                pylark.ReplyMeetingRoomInstanceReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_meeting_room_building(
                pylark.CreateMeetingRoomBuildingReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_meeting_room_building(
                pylark.UpdateMeetingRoomBuildingReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_meeting_room_building(
                pylark.DeleteMeetingRoomBuildingReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_get_meeting_room_building_id(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_building_id(
                pylark.BatchGetMeetingRoomBuildingIDReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_meeting_room_room(pylark.CreateMeetingRoomRoomReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_meeting_room_room(pylark.UpdateMeetingRoomRoomReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_meeting_room_room(pylark.DeleteMeetingRoomRoomReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_get_meeting_room_room_id(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_room_id(
                pylark.BatchGetMeetingRoomRoomIDReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_meeting_room_country_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_country_list(
                pylark.GetMeetingRoomCountryListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_meeting_room_district_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_district_list(
                pylark.GetMeetingRoomDistrictListReq()
            )

        assert "msg=failed" in f"{e}"


# mock mock self func
class TestMeetingRoomSampleMockSelfFuncFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestMeetingRoomSampleMockSelfFuncFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.meeting_room

    def test_mock_self_func_batch_get_meeting_room_summary(self):
        origin_func = self.module_cli.batch_get_meeting_room_summary
        self.module_cli.batch_get_meeting_room_summary = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_summary(
                pylark.BatchGetMeetingRoomSummaryReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_get_meeting_room_summary = origin_func

    def test_mock_self_func_get_meeting_room_building_list(self):
        origin_func = self.module_cli.get_meeting_room_building_list
        self.module_cli.get_meeting_room_building_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_building_list(
                pylark.GetMeetingRoomBuildingListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_meeting_room_building_list = origin_func

    def test_mock_self_func_batch_get_meeting_room_building(self):
        origin_func = self.module_cli.batch_get_meeting_room_building
        self.module_cli.batch_get_meeting_room_building = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_building(
                pylark.BatchGetMeetingRoomBuildingReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_get_meeting_room_building = origin_func

    def test_mock_self_func_get_meeting_room_room_list(self):
        origin_func = self.module_cli.get_meeting_room_room_list
        self.module_cli.get_meeting_room_room_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_room_list(
                pylark.GetMeetingRoomRoomListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_meeting_room_room_list = origin_func

    def test_mock_self_func_batch_get_meeting_room_room(self):
        origin_func = self.module_cli.batch_get_meeting_room_room
        self.module_cli.batch_get_meeting_room_room = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_room(
                pylark.BatchGetMeetingRoomRoomReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_get_meeting_room_room = origin_func

    def test_mock_self_func_batch_get_meeting_room_freebusy(self):
        origin_func = self.module_cli.batch_get_meeting_room_freebusy
        self.module_cli.batch_get_meeting_room_freebusy = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_freebusy(
                pylark.BatchGetMeetingRoomFreebusyReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_get_meeting_room_freebusy = origin_func

    def test_mock_self_func_reply_meeting_room_instance(self):
        origin_func = self.module_cli.reply_meeting_room_instance
        self.module_cli.reply_meeting_room_instance = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.reply_meeting_room_instance(
                pylark.ReplyMeetingRoomInstanceReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.reply_meeting_room_instance = origin_func

    def test_mock_self_func_create_meeting_room_building(self):
        origin_func = self.module_cli.create_meeting_room_building
        self.module_cli.create_meeting_room_building = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_meeting_room_building(
                pylark.CreateMeetingRoomBuildingReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_meeting_room_building = origin_func

    def test_mock_self_func_update_meeting_room_building(self):
        origin_func = self.module_cli.update_meeting_room_building
        self.module_cli.update_meeting_room_building = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_meeting_room_building(
                pylark.UpdateMeetingRoomBuildingReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_meeting_room_building = origin_func

    def test_mock_self_func_delete_meeting_room_building(self):
        origin_func = self.module_cli.delete_meeting_room_building
        self.module_cli.delete_meeting_room_building = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_meeting_room_building(
                pylark.DeleteMeetingRoomBuildingReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_meeting_room_building = origin_func

    def test_mock_self_func_batch_get_meeting_room_building_id(self):
        origin_func = self.module_cli.batch_get_meeting_room_building_id
        self.module_cli.batch_get_meeting_room_building_id = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_building_id(
                pylark.BatchGetMeetingRoomBuildingIDReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_get_meeting_room_building_id = origin_func

    def test_mock_self_func_create_meeting_room_room(self):
        origin_func = self.module_cli.create_meeting_room_room
        self.module_cli.create_meeting_room_room = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_meeting_room_room(pylark.CreateMeetingRoomRoomReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_meeting_room_room = origin_func

    def test_mock_self_func_update_meeting_room_room(self):
        origin_func = self.module_cli.update_meeting_room_room
        self.module_cli.update_meeting_room_room = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_meeting_room_room(pylark.UpdateMeetingRoomRoomReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_meeting_room_room = origin_func

    def test_mock_self_func_delete_meeting_room_room(self):
        origin_func = self.module_cli.delete_meeting_room_room
        self.module_cli.delete_meeting_room_room = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_meeting_room_room(pylark.DeleteMeetingRoomRoomReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_meeting_room_room = origin_func

    def test_mock_self_func_batch_get_meeting_room_room_id(self):
        origin_func = self.module_cli.batch_get_meeting_room_room_id
        self.module_cli.batch_get_meeting_room_room_id = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_room_id(
                pylark.BatchGetMeetingRoomRoomIDReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_get_meeting_room_room_id = origin_func

    def test_mock_self_func_get_meeting_room_country_list(self):
        origin_func = self.module_cli.get_meeting_room_country_list
        self.module_cli.get_meeting_room_country_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_country_list(
                pylark.GetMeetingRoomCountryListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_meeting_room_country_list = origin_func

    def test_mock_self_func_get_meeting_room_district_list(self):
        origin_func = self.module_cli.get_meeting_room_district_list
        self.module_cli.get_meeting_room_district_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_district_list(
                pylark.GetMeetingRoomDistrictListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_meeting_room_district_list = origin_func


# mock raw request
class TestMeetingRoomSampleMockRawRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestMeetingRoomSampleMockRawRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.meeting_room
        self.cli.raw_request = mock_raw_request

    def test_mock_raw_request_batch_get_meeting_room_summary(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_summary(
                pylark.BatchGetMeetingRoomSummaryReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_meeting_room_building_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_building_list(
                pylark.GetMeetingRoomBuildingListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_get_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_building(
                pylark.BatchGetMeetingRoomBuildingReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_meeting_room_room_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_room_list(
                pylark.GetMeetingRoomRoomListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_get_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_room(
                pylark.BatchGetMeetingRoomRoomReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_get_meeting_room_freebusy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_freebusy(
                pylark.BatchGetMeetingRoomFreebusyReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_reply_meeting_room_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.reply_meeting_room_instance(
                pylark.ReplyMeetingRoomInstanceReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_meeting_room_building(
                pylark.CreateMeetingRoomBuildingReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_meeting_room_building(
                pylark.UpdateMeetingRoomBuildingReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_meeting_room_building(
                pylark.DeleteMeetingRoomBuildingReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_get_meeting_room_building_id(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_building_id(
                pylark.BatchGetMeetingRoomBuildingIDReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_meeting_room_room(pylark.CreateMeetingRoomRoomReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_meeting_room_room(pylark.UpdateMeetingRoomRoomReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_meeting_room_room(pylark.DeleteMeetingRoomRoomReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_get_meeting_room_room_id(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_room_id(
                pylark.BatchGetMeetingRoomRoomIDReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_meeting_room_country_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_country_list(
                pylark.GetMeetingRoomCountryListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_meeting_room_district_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_district_list(
                pylark.GetMeetingRoomDistrictListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg


# real request
class TestMeetingRoomSampleRealRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestMeetingRoomSampleRealRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_no_permission.ins()
        self.module_cli = self.cli.meeting_room

    def test_real_request_batch_get_meeting_room_summary(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_summary(
                pylark.BatchGetMeetingRoomSummaryReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_meeting_room_building_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_building_list(
                pylark.GetMeetingRoomBuildingListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_get_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_building(
                pylark.BatchGetMeetingRoomBuildingReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_meeting_room_room_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_room_list(
                pylark.GetMeetingRoomRoomListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_get_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_room(
                pylark.BatchGetMeetingRoomRoomReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_get_meeting_room_freebusy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_freebusy(
                pylark.BatchGetMeetingRoomFreebusyReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_reply_meeting_room_instance(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.reply_meeting_room_instance(
                pylark.ReplyMeetingRoomInstanceReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_meeting_room_building(
                pylark.CreateMeetingRoomBuildingReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_meeting_room_building(
                pylark.UpdateMeetingRoomBuildingReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_meeting_room_building(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_meeting_room_building(
                pylark.DeleteMeetingRoomBuildingReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_get_meeting_room_building_id(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_building_id(
                pylark.BatchGetMeetingRoomBuildingIDReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_meeting_room_room(pylark.CreateMeetingRoomRoomReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_meeting_room_room(pylark.UpdateMeetingRoomRoomReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_meeting_room_room(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_meeting_room_room(pylark.DeleteMeetingRoomRoomReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_get_meeting_room_room_id(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_meeting_room_room_id(
                pylark.BatchGetMeetingRoomRoomIDReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_meeting_room_country_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_country_list(
                pylark.GetMeetingRoomCountryListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_meeting_room_district_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_meeting_room_district_list(
                pylark.GetMeetingRoomDistrictListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
