# Code generated by lark_sdk_gen. DO NOT EDIT.

from pylark.log import logger
from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest


class Test_Attendance_Sample_RequestFailed(unittest.TestCase):
    def __init__(self):
        super().__init__()
        self.cli = app_all_permission.ins()
        # self.cli.mock().MockGetTenantAccessToken(mockGetTenantAccessTokenFailed)
        # self.cli.mock().MockGetAppAccessToken(mockGetTenantAccessTokenFailed)
        self.module_cli = self.cli.attendance

    def test_request_failed_download_attendance_file(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DownloadAttendanceFile(
                pylark.DownloadAttendanceFileReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_upload_attendance_file(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UploadAttendanceFile(
                pylark.UploadAttendanceFileReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_query_attendance_user_settings(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.QueryAttendanceUserSettings(
                pylark.QueryAttendanceUserSettingsReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_attendance_user_settings(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateAttendanceUserSettings(
                pylark.UpdateAttendanceUserSettingsReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_update_attendance_group(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateUpdateAttendanceGroup(
                pylark.CreateUpdateAttendanceGroupReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_attendance_group(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteAttendanceGroup(
                pylark.DeleteAttendanceGroupReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_attendance_group(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetAttendanceGroup(
                pylark.GetAttendanceGroupReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_attendance_shift(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateAttendanceShift(
                pylark.CreateAttendanceShiftReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_attendance_shift(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteAttendanceShift(
                pylark.DeleteAttendanceShiftReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_attendance_shift_by_id(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetAttendanceShiftByID(
                pylark.GetAttendanceShiftByIDReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_attendance_shift_by_name(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetAttendanceShiftByName(
                pylark.GetAttendanceShiftByNameReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_attendance_statistics_data(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetAttendanceStatisticsData(
                pylark.GetAttendanceStatisticsDataReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_attendance_statistics_header(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetAttendanceStatisticsHeader(
                pylark.GetAttendanceStatisticsHeaderReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_attendance_user_statistics_settings(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateAttendanceUserStatisticsSettings(
                pylark.UpdateAttendanceUserStatisticsSettingsReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_attendance_user_statistics_settings(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetAttendanceUserStatisticsSettings(
                pylark.GetAttendanceUserStatisticsSettingsReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_attendance_user_daily_shift(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetAttendanceUserDailyShift(
                pylark.GetAttendanceUserDailyShiftReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_attendance_user_task(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetAttendanceUserTask(
                pylark.GetAttendanceUserTaskReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_attendance_user_flow(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetAttendanceUserFlow(
                pylark.GetAttendanceUserFlowReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_batch_get_attendance_user_flow(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.BatchGetAttendanceUserFlow(
                pylark.BatchGetAttendanceUserFlowReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_batch_create_attendance_user_flow(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.BatchCreateAttendanceUserFlow(
                pylark.BatchCreateAttendanceUserFlowReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_attendance_user_task_remedy(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetAttendanceUserTaskRemedy(
                pylark.GetAttendanceUserTaskRemedyReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_update_attendance_user_daily_shift(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateUpdateAttendanceUserDailyShift(
                pylark.CreateUpdateAttendanceUserDailyShiftReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_attendance_user_approval(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetAttendanceUserApproval(
                pylark.GetAttendanceUserApprovalReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_attendance_user_approval(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateAttendanceUserApproval(
                pylark.CreateAttendanceUserApprovalReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_attendance_user_allowed_remedy(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetAttendanceUserAllowedRemedy(
                pylark.GetAttendanceUserAllowedRemedyReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_init_attendance_remedy_approval(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.InitAttendanceRemedyApproval(
                pylark.InitAttendanceRemedyApprovalReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_attendance_remedy_approval(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateAttendanceRemedyApproval(
                pylark.UpdateAttendanceRemedyApprovalReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")
