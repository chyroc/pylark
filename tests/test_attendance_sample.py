# Code generated by lark_sdk_gen. DO NOT EDIT.

import unittest
import pylark
import pytest
from tests.test_conf import app_all_permission, app_no_permission
from tests.test_helper import mock_get_tenant_access_token_failed


def mock(*args, **kwargs):
    raise pylark.PyLarkError(scope="scope", func="func", code=1, msg="mock-failed")


def mock_raw_request(*args, **kwargs):
    raise pylark.PyLarkError(
        scope="scope", func="func", code=1, msg="mock-raw-request-failed"
    )


# mock get token
class TestAttendanceSampleMockGetTokenFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestAttendanceSampleMockGetTokenFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.attendance

    def test_mock_get_token_download_attendance_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_attendance_file(pylark.DownloadAttendanceFileReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_upload_attendance_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_attendance_file(pylark.UploadAttendanceFileReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_query_attendance_user_settings(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_attendance_user_settings(
                pylark.QueryAttendanceUserSettingsReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_attendance_user_settings(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_attendance_user_settings(
                pylark.UpdateAttendanceUserSettingsReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_update_attendance_group(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_update_attendance_group(
                pylark.CreateUpdateAttendanceGroupReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_attendance_group(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_attendance_group(pylark.DeleteAttendanceGroupReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_attendance_group(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_group(pylark.GetAttendanceGroupReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_attendance_shift(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_attendance_shift(pylark.CreateAttendanceShiftReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_attendance_shift(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_attendance_shift(pylark.DeleteAttendanceShiftReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_attendance_shift_by_id(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_shift_by_id(
                pylark.GetAttendanceShiftByIDReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_attendance_shift_by_name(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_shift_by_name(
                pylark.GetAttendanceShiftByNameReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_attendance_statistics_data(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_statistics_data(
                pylark.GetAttendanceStatisticsDataReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_attendance_statistics_header(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_statistics_header(
                pylark.GetAttendanceStatisticsHeaderReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_attendance_user_statistics_settings(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_attendance_user_statistics_settings(
                pylark.UpdateAttendanceUserStatisticsSettingsReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_attendance_user_statistics_settings(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_statistics_settings(
                pylark.GetAttendanceUserStatisticsSettingsReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_attendance_user_daily_shift(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_daily_shift(
                pylark.GetAttendanceUserDailyShiftReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_attendance_user_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_task(pylark.GetAttendanceUserTaskReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_attendance_user_flow(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_flow(pylark.GetAttendanceUserFlowReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_get_attendance_user_flow(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_attendance_user_flow(
                pylark.BatchGetAttendanceUserFlowReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_create_attendance_user_flow(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_create_attendance_user_flow(
                pylark.BatchCreateAttendanceUserFlowReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_attendance_user_task_remedy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_task_remedy(
                pylark.GetAttendanceUserTaskRemedyReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_update_attendance_user_daily_shift(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_update_attendance_user_daily_shift(
                pylark.CreateUpdateAttendanceUserDailyShiftReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_attendance_user_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_approval(
                pylark.GetAttendanceUserApprovalReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_attendance_user_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_attendance_user_approval(
                pylark.CreateAttendanceUserApprovalReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_attendance_user_allowed_remedy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_allowed_remedy(
                pylark.GetAttendanceUserAllowedRemedyReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_init_attendance_remedy_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.init_attendance_remedy_approval(
                pylark.InitAttendanceRemedyApprovalReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_attendance_remedy_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_attendance_remedy_approval(
                pylark.UpdateAttendanceRemedyApprovalReq()
            )

        assert "msg=failed" in f"{e}"


# mock mock self func
class TestAttendanceSampleMockSelfFuncFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestAttendanceSampleMockSelfFuncFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.attendance

    def test_mock_self_func_download_attendance_file(self):
        origin_func = self.module_cli.download_attendance_file
        self.module_cli.download_attendance_file = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_attendance_file(pylark.DownloadAttendanceFileReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.download_attendance_file = origin_func

    def test_mock_self_func_upload_attendance_file(self):
        origin_func = self.module_cli.upload_attendance_file
        self.module_cli.upload_attendance_file = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_attendance_file(pylark.UploadAttendanceFileReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.upload_attendance_file = origin_func

    def test_mock_self_func_query_attendance_user_settings(self):
        origin_func = self.module_cli.query_attendance_user_settings
        self.module_cli.query_attendance_user_settings = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_attendance_user_settings(
                pylark.QueryAttendanceUserSettingsReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.query_attendance_user_settings = origin_func

    def test_mock_self_func_update_attendance_user_settings(self):
        origin_func = self.module_cli.update_attendance_user_settings
        self.module_cli.update_attendance_user_settings = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_attendance_user_settings(
                pylark.UpdateAttendanceUserSettingsReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_attendance_user_settings = origin_func

    def test_mock_self_func_create_update_attendance_group(self):
        origin_func = self.module_cli.create_update_attendance_group
        self.module_cli.create_update_attendance_group = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_update_attendance_group(
                pylark.CreateUpdateAttendanceGroupReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_update_attendance_group = origin_func

    def test_mock_self_func_delete_attendance_group(self):
        origin_func = self.module_cli.delete_attendance_group
        self.module_cli.delete_attendance_group = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_attendance_group(pylark.DeleteAttendanceGroupReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_attendance_group = origin_func

    def test_mock_self_func_get_attendance_group(self):
        origin_func = self.module_cli.get_attendance_group
        self.module_cli.get_attendance_group = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_group(pylark.GetAttendanceGroupReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_attendance_group = origin_func

    def test_mock_self_func_create_attendance_shift(self):
        origin_func = self.module_cli.create_attendance_shift
        self.module_cli.create_attendance_shift = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_attendance_shift(pylark.CreateAttendanceShiftReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_attendance_shift = origin_func

    def test_mock_self_func_delete_attendance_shift(self):
        origin_func = self.module_cli.delete_attendance_shift
        self.module_cli.delete_attendance_shift = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_attendance_shift(pylark.DeleteAttendanceShiftReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_attendance_shift = origin_func

    def test_mock_self_func_get_attendance_shift_by_id(self):
        origin_func = self.module_cli.get_attendance_shift_by_id
        self.module_cli.get_attendance_shift_by_id = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_shift_by_id(
                pylark.GetAttendanceShiftByIDReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_attendance_shift_by_id = origin_func

    def test_mock_self_func_get_attendance_shift_by_name(self):
        origin_func = self.module_cli.get_attendance_shift_by_name
        self.module_cli.get_attendance_shift_by_name = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_shift_by_name(
                pylark.GetAttendanceShiftByNameReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_attendance_shift_by_name = origin_func

    def test_mock_self_func_get_attendance_statistics_data(self):
        origin_func = self.module_cli.get_attendance_statistics_data
        self.module_cli.get_attendance_statistics_data = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_statistics_data(
                pylark.GetAttendanceStatisticsDataReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_attendance_statistics_data = origin_func

    def test_mock_self_func_get_attendance_statistics_header(self):
        origin_func = self.module_cli.get_attendance_statistics_header
        self.module_cli.get_attendance_statistics_header = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_statistics_header(
                pylark.GetAttendanceStatisticsHeaderReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_attendance_statistics_header = origin_func

    def test_mock_self_func_update_attendance_user_statistics_settings(self):
        origin_func = self.module_cli.update_attendance_user_statistics_settings
        self.module_cli.update_attendance_user_statistics_settings = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_attendance_user_statistics_settings(
                pylark.UpdateAttendanceUserStatisticsSettingsReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_attendance_user_statistics_settings = origin_func

    def test_mock_self_func_get_attendance_user_statistics_settings(self):
        origin_func = self.module_cli.get_attendance_user_statistics_settings
        self.module_cli.get_attendance_user_statistics_settings = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_statistics_settings(
                pylark.GetAttendanceUserStatisticsSettingsReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_attendance_user_statistics_settings = origin_func

    def test_mock_self_func_get_attendance_user_daily_shift(self):
        origin_func = self.module_cli.get_attendance_user_daily_shift
        self.module_cli.get_attendance_user_daily_shift = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_daily_shift(
                pylark.GetAttendanceUserDailyShiftReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_attendance_user_daily_shift = origin_func

    def test_mock_self_func_get_attendance_user_task(self):
        origin_func = self.module_cli.get_attendance_user_task
        self.module_cli.get_attendance_user_task = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_task(pylark.GetAttendanceUserTaskReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_attendance_user_task = origin_func

    def test_mock_self_func_get_attendance_user_flow(self):
        origin_func = self.module_cli.get_attendance_user_flow
        self.module_cli.get_attendance_user_flow = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_flow(pylark.GetAttendanceUserFlowReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_attendance_user_flow = origin_func

    def test_mock_self_func_batch_get_attendance_user_flow(self):
        origin_func = self.module_cli.batch_get_attendance_user_flow
        self.module_cli.batch_get_attendance_user_flow = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_attendance_user_flow(
                pylark.BatchGetAttendanceUserFlowReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_get_attendance_user_flow = origin_func

    def test_mock_self_func_batch_create_attendance_user_flow(self):
        origin_func = self.module_cli.batch_create_attendance_user_flow
        self.module_cli.batch_create_attendance_user_flow = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_create_attendance_user_flow(
                pylark.BatchCreateAttendanceUserFlowReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_create_attendance_user_flow = origin_func

    def test_mock_self_func_get_attendance_user_task_remedy(self):
        origin_func = self.module_cli.get_attendance_user_task_remedy
        self.module_cli.get_attendance_user_task_remedy = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_task_remedy(
                pylark.GetAttendanceUserTaskRemedyReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_attendance_user_task_remedy = origin_func

    def test_mock_self_func_create_update_attendance_user_daily_shift(self):
        origin_func = self.module_cli.create_update_attendance_user_daily_shift
        self.module_cli.create_update_attendance_user_daily_shift = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_update_attendance_user_daily_shift(
                pylark.CreateUpdateAttendanceUserDailyShiftReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_update_attendance_user_daily_shift = origin_func

    def test_mock_self_func_get_attendance_user_approval(self):
        origin_func = self.module_cli.get_attendance_user_approval
        self.module_cli.get_attendance_user_approval = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_approval(
                pylark.GetAttendanceUserApprovalReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_attendance_user_approval = origin_func

    def test_mock_self_func_create_attendance_user_approval(self):
        origin_func = self.module_cli.create_attendance_user_approval
        self.module_cli.create_attendance_user_approval = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_attendance_user_approval(
                pylark.CreateAttendanceUserApprovalReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_attendance_user_approval = origin_func

    def test_mock_self_func_get_attendance_user_allowed_remedy(self):
        origin_func = self.module_cli.get_attendance_user_allowed_remedy
        self.module_cli.get_attendance_user_allowed_remedy = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_allowed_remedy(
                pylark.GetAttendanceUserAllowedRemedyReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_attendance_user_allowed_remedy = origin_func

    def test_mock_self_func_init_attendance_remedy_approval(self):
        origin_func = self.module_cli.init_attendance_remedy_approval
        self.module_cli.init_attendance_remedy_approval = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.init_attendance_remedy_approval(
                pylark.InitAttendanceRemedyApprovalReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.init_attendance_remedy_approval = origin_func

    def test_mock_self_func_update_attendance_remedy_approval(self):
        origin_func = self.module_cli.update_attendance_remedy_approval
        self.module_cli.update_attendance_remedy_approval = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_attendance_remedy_approval(
                pylark.UpdateAttendanceRemedyApprovalReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_attendance_remedy_approval = origin_func


# mock raw request
class TestAttendanceSampleMockRawRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestAttendanceSampleMockRawRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.attendance
        self.cli.raw_request = mock_raw_request

    def test_mock_raw_request_download_attendance_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_attendance_file(
                pylark.DownloadAttendanceFileReq(
                    file_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_upload_attendance_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_attendance_file(pylark.UploadAttendanceFileReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_query_attendance_user_settings(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_attendance_user_settings(
                pylark.QueryAttendanceUserSettingsReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_attendance_user_settings(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_attendance_user_settings(
                pylark.UpdateAttendanceUserSettingsReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_update_attendance_group(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_update_attendance_group(
                pylark.CreateUpdateAttendanceGroupReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_attendance_group(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_attendance_group(
                pylark.DeleteAttendanceGroupReq(
                    group_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_attendance_group(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_group(
                pylark.GetAttendanceGroupReq(
                    group_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_attendance_shift(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_attendance_shift(pylark.CreateAttendanceShiftReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_attendance_shift(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_attendance_shift(
                pylark.DeleteAttendanceShiftReq(
                    shift_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_attendance_shift_by_id(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_shift_by_id(
                pylark.GetAttendanceShiftByIDReq(
                    shift_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_attendance_shift_by_name(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_shift_by_name(
                pylark.GetAttendanceShiftByNameReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_attendance_statistics_data(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_statistics_data(
                pylark.GetAttendanceStatisticsDataReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_attendance_statistics_header(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_statistics_header(
                pylark.GetAttendanceStatisticsHeaderReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_attendance_user_statistics_settings(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_attendance_user_statistics_settings(
                pylark.UpdateAttendanceUserStatisticsSettingsReq(
                    user_stats_view_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_attendance_user_statistics_settings(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_statistics_settings(
                pylark.GetAttendanceUserStatisticsSettingsReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_attendance_user_daily_shift(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_daily_shift(
                pylark.GetAttendanceUserDailyShiftReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_attendance_user_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_task(pylark.GetAttendanceUserTaskReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_attendance_user_flow(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_flow(
                pylark.GetAttendanceUserFlowReq(
                    user_flow_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_get_attendance_user_flow(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_attendance_user_flow(
                pylark.BatchGetAttendanceUserFlowReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_create_attendance_user_flow(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_create_attendance_user_flow(
                pylark.BatchCreateAttendanceUserFlowReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_attendance_user_task_remedy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_task_remedy(
                pylark.GetAttendanceUserTaskRemedyReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_update_attendance_user_daily_shift(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_update_attendance_user_daily_shift(
                pylark.CreateUpdateAttendanceUserDailyShiftReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_attendance_user_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_approval(
                pylark.GetAttendanceUserApprovalReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_attendance_user_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_attendance_user_approval(
                pylark.CreateAttendanceUserApprovalReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_attendance_user_allowed_remedy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_allowed_remedy(
                pylark.GetAttendanceUserAllowedRemedyReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_init_attendance_remedy_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.init_attendance_remedy_approval(
                pylark.InitAttendanceRemedyApprovalReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_attendance_remedy_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_attendance_remedy_approval(
                pylark.UpdateAttendanceRemedyApprovalReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg


# real request
class TestAttendanceSampleRealRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestAttendanceSampleRealRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_no_permission.ins()
        self.module_cli = self.cli.attendance

    def test_real_request_download_attendance_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_attendance_file(
                pylark.DownloadAttendanceFileReq(
                    file_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_upload_attendance_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_attendance_file(pylark.UploadAttendanceFileReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_query_attendance_user_settings(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_attendance_user_settings(
                pylark.QueryAttendanceUserSettingsReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_attendance_user_settings(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_attendance_user_settings(
                pylark.UpdateAttendanceUserSettingsReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_update_attendance_group(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_update_attendance_group(
                pylark.CreateUpdateAttendanceGroupReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_attendance_group(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_attendance_group(
                pylark.DeleteAttendanceGroupReq(
                    group_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_attendance_group(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_group(
                pylark.GetAttendanceGroupReq(
                    group_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_attendance_shift(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_attendance_shift(pylark.CreateAttendanceShiftReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_attendance_shift(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_attendance_shift(
                pylark.DeleteAttendanceShiftReq(
                    shift_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_attendance_shift_by_id(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_shift_by_id(
                pylark.GetAttendanceShiftByIDReq(
                    shift_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_attendance_shift_by_name(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_shift_by_name(
                pylark.GetAttendanceShiftByNameReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_attendance_statistics_data(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_statistics_data(
                pylark.GetAttendanceStatisticsDataReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_attendance_statistics_header(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_statistics_header(
                pylark.GetAttendanceStatisticsHeaderReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_attendance_user_statistics_settings(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_attendance_user_statistics_settings(
                pylark.UpdateAttendanceUserStatisticsSettingsReq(
                    user_stats_view_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_attendance_user_statistics_settings(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_statistics_settings(
                pylark.GetAttendanceUserStatisticsSettingsReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_attendance_user_daily_shift(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_daily_shift(
                pylark.GetAttendanceUserDailyShiftReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_attendance_user_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_task(pylark.GetAttendanceUserTaskReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_attendance_user_flow(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_flow(
                pylark.GetAttendanceUserFlowReq(
                    user_flow_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_get_attendance_user_flow(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_attendance_user_flow(
                pylark.BatchGetAttendanceUserFlowReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_create_attendance_user_flow(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_create_attendance_user_flow(
                pylark.BatchCreateAttendanceUserFlowReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_attendance_user_task_remedy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_task_remedy(
                pylark.GetAttendanceUserTaskRemedyReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_update_attendance_user_daily_shift(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_update_attendance_user_daily_shift(
                pylark.CreateUpdateAttendanceUserDailyShiftReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_attendance_user_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_approval(
                pylark.GetAttendanceUserApprovalReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_attendance_user_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_attendance_user_approval(
                pylark.CreateAttendanceUserApprovalReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_attendance_user_allowed_remedy(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_attendance_user_allowed_remedy(
                pylark.GetAttendanceUserAllowedRemedyReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_init_attendance_remedy_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.init_attendance_remedy_approval(
                pylark.InitAttendanceRemedyApprovalReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_attendance_remedy_approval(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_attendance_remedy_approval(
                pylark.UpdateAttendanceRemedyApprovalReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
