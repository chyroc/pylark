# Code generated by lark_sdk_gen. DO NOT EDIT.

import unittest
import pylark
import pytest
from tests.test_conf import app_all_permission, app_no_permission
from tests.test_helper import mock_get_tenant_access_token_failed


def mock(*args, **kwargs):
    raise pylark.PyLarkError(scope="scope", func="func", code=1, msg="mock-failed")


def mock_raw_request(*args, **kwargs):
    raise pylark.PyLarkError(
        scope="scope", func="func", code=1, msg="mock-raw-request-failed"
    )


# mock get token
class TestCalendarSampleMockGetTokenFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestCalendarSampleMockGetTokenFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.calendar

    def test_mock_get_token_create_calendar_acl(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_acl(pylark.CreateCalendarACLReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_calendar_acl(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_acl(pylark.DeleteCalendarACLReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_calendar_acl_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_acl_list(pylark.GetCalendarACLListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar(pylark.CreateCalendarReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar(pylark.DeleteCalendarReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar(pylark.GetCalendarReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_calendar_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_list(pylark.GetCalendarListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_calendar(pylark.UpdateCalendarReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_search_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_calendar(pylark.SearchCalendarReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_subscribe_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.subscribe_calendar(pylark.SubscribeCalendarReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_unsubscribe_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.unsubscribe_calendar(pylark.UnsubscribeCalendarReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_event(pylark.CreateCalendarEventReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_event(pylark.DeleteCalendarEventReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event(pylark.GetCalendarEventReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_calendar_event_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_list(pylark.GetCalendarEventListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_calendar_event(pylark.UpdateCalendarEventReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_calendar_event_attendee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_event_attendee(
                pylark.CreateCalendarEventAttendeeReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_calendar_event_attendee_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_attendee_list(
                pylark.GetCalendarEventAttendeeListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_calendar_event_attendee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_event_attendee(
                pylark.DeleteCalendarEventAttendeeReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_calendar_event_attendee_chat_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_attendee_chat_member_list(
                pylark.GetCalendarEventAttendeeChatMemberListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_calendar_timeoff_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_timeoff_event(
                pylark.CreateCalendarTimeoffEventReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_calendar_timeoff_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_timeoff_event(
                pylark.DeleteCalendarTimeoffEventReq()
            )

        assert "msg=failed" in f"{e}"


# mock mock self func
class TestCalendarSampleMockSelfFuncFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestCalendarSampleMockSelfFuncFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.calendar

    def test_mock_self_func_create_calendar_acl(self):
        origin_func = self.module_cli.create_calendar_acl
        self.module_cli.create_calendar_acl = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_acl(pylark.CreateCalendarACLReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_calendar_acl = origin_func

    def test_mock_self_func_delete_calendar_acl(self):
        origin_func = self.module_cli.delete_calendar_acl
        self.module_cli.delete_calendar_acl = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_acl(pylark.DeleteCalendarACLReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_calendar_acl = origin_func

    def test_mock_self_func_get_calendar_acl_list(self):
        origin_func = self.module_cli.get_calendar_acl_list
        self.module_cli.get_calendar_acl_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_acl_list(pylark.GetCalendarACLListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_calendar_acl_list = origin_func

    def test_mock_self_func_create_calendar(self):
        origin_func = self.module_cli.create_calendar
        self.module_cli.create_calendar = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar(pylark.CreateCalendarReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_calendar = origin_func

    def test_mock_self_func_delete_calendar(self):
        origin_func = self.module_cli.delete_calendar
        self.module_cli.delete_calendar = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar(pylark.DeleteCalendarReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_calendar = origin_func

    def test_mock_self_func_get_calendar(self):
        origin_func = self.module_cli.get_calendar
        self.module_cli.get_calendar = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar(pylark.GetCalendarReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_calendar = origin_func

    def test_mock_self_func_get_calendar_list(self):
        origin_func = self.module_cli.get_calendar_list
        self.module_cli.get_calendar_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_list(pylark.GetCalendarListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_calendar_list = origin_func

    def test_mock_self_func_update_calendar(self):
        origin_func = self.module_cli.update_calendar
        self.module_cli.update_calendar = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_calendar(pylark.UpdateCalendarReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_calendar = origin_func

    def test_mock_self_func_search_calendar(self):
        origin_func = self.module_cli.search_calendar
        self.module_cli.search_calendar = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_calendar(pylark.SearchCalendarReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.search_calendar = origin_func

    def test_mock_self_func_subscribe_calendar(self):
        origin_func = self.module_cli.subscribe_calendar
        self.module_cli.subscribe_calendar = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.subscribe_calendar(pylark.SubscribeCalendarReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.subscribe_calendar = origin_func

    def test_mock_self_func_unsubscribe_calendar(self):
        origin_func = self.module_cli.unsubscribe_calendar
        self.module_cli.unsubscribe_calendar = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.unsubscribe_calendar(pylark.UnsubscribeCalendarReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.unsubscribe_calendar = origin_func

    def test_mock_self_func_create_calendar_event(self):
        origin_func = self.module_cli.create_calendar_event
        self.module_cli.create_calendar_event = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_event(pylark.CreateCalendarEventReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_calendar_event = origin_func

    def test_mock_self_func_delete_calendar_event(self):
        origin_func = self.module_cli.delete_calendar_event
        self.module_cli.delete_calendar_event = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_event(pylark.DeleteCalendarEventReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_calendar_event = origin_func

    def test_mock_self_func_get_calendar_event(self):
        origin_func = self.module_cli.get_calendar_event
        self.module_cli.get_calendar_event = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event(pylark.GetCalendarEventReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_calendar_event = origin_func

    def test_mock_self_func_get_calendar_event_list(self):
        origin_func = self.module_cli.get_calendar_event_list
        self.module_cli.get_calendar_event_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_list(pylark.GetCalendarEventListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_calendar_event_list = origin_func

    def test_mock_self_func_update_calendar_event(self):
        origin_func = self.module_cli.update_calendar_event
        self.module_cli.update_calendar_event = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_calendar_event(pylark.UpdateCalendarEventReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_calendar_event = origin_func

    def test_mock_self_func_create_calendar_event_attendee(self):
        origin_func = self.module_cli.create_calendar_event_attendee
        self.module_cli.create_calendar_event_attendee = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_event_attendee(
                pylark.CreateCalendarEventAttendeeReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_calendar_event_attendee = origin_func

    def test_mock_self_func_get_calendar_event_attendee_list(self):
        origin_func = self.module_cli.get_calendar_event_attendee_list
        self.module_cli.get_calendar_event_attendee_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_attendee_list(
                pylark.GetCalendarEventAttendeeListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_calendar_event_attendee_list = origin_func

    def test_mock_self_func_delete_calendar_event_attendee(self):
        origin_func = self.module_cli.delete_calendar_event_attendee
        self.module_cli.delete_calendar_event_attendee = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_event_attendee(
                pylark.DeleteCalendarEventAttendeeReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_calendar_event_attendee = origin_func

    def test_mock_self_func_get_calendar_event_attendee_chat_member_list(self):
        origin_func = self.module_cli.get_calendar_event_attendee_chat_member_list
        self.module_cli.get_calendar_event_attendee_chat_member_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_attendee_chat_member_list(
                pylark.GetCalendarEventAttendeeChatMemberListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_calendar_event_attendee_chat_member_list = origin_func

    def test_mock_self_func_create_calendar_timeoff_event(self):
        origin_func = self.module_cli.create_calendar_timeoff_event
        self.module_cli.create_calendar_timeoff_event = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_timeoff_event(
                pylark.CreateCalendarTimeoffEventReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_calendar_timeoff_event = origin_func

    def test_mock_self_func_delete_calendar_timeoff_event(self):
        origin_func = self.module_cli.delete_calendar_timeoff_event
        self.module_cli.delete_calendar_timeoff_event = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_timeoff_event(
                pylark.DeleteCalendarTimeoffEventReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_calendar_timeoff_event = origin_func


# mock raw request
class TestCalendarSampleMockRawRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestCalendarSampleMockRawRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.calendar
        self.cli.raw_request = mock_raw_request

    def test_mock_raw_request_create_calendar_acl(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_acl(
                pylark.CreateCalendarACLReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_calendar_acl(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_acl(
                pylark.DeleteCalendarACLReq(
                    calendar_id="x",
                    acl_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_calendar_acl_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_acl_list(
                pylark.GetCalendarACLListReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar(pylark.CreateCalendarReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar(
                pylark.DeleteCalendarReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar(
                pylark.GetCalendarReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_calendar_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_list(pylark.GetCalendarListReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_calendar(
                pylark.UpdateCalendarReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_search_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_calendar(pylark.SearchCalendarReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_subscribe_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.subscribe_calendar(
                pylark.SubscribeCalendarReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_unsubscribe_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.unsubscribe_calendar(
                pylark.UnsubscribeCalendarReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_event(
                pylark.CreateCalendarEventReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_event(
                pylark.DeleteCalendarEventReq(
                    calendar_id="x",
                    event_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event(
                pylark.GetCalendarEventReq(
                    calendar_id="x",
                    event_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_calendar_event_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_list(
                pylark.GetCalendarEventListReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_calendar_event(
                pylark.UpdateCalendarEventReq(
                    calendar_id="x",
                    event_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_calendar_event_attendee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_event_attendee(
                pylark.CreateCalendarEventAttendeeReq(
                    calendar_id="x",
                    event_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_calendar_event_attendee_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_attendee_list(
                pylark.GetCalendarEventAttendeeListReq(
                    calendar_id="x",
                    event_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_calendar_event_attendee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_event_attendee(
                pylark.DeleteCalendarEventAttendeeReq(
                    calendar_id="x",
                    event_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_calendar_event_attendee_chat_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_attendee_chat_member_list(
                pylark.GetCalendarEventAttendeeChatMemberListReq(
                    calendar_id="x",
                    event_id="x",
                    attendee_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_calendar_timeoff_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_timeoff_event(
                pylark.CreateCalendarTimeoffEventReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_calendar_timeoff_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_timeoff_event(
                pylark.DeleteCalendarTimeoffEventReq(
                    timeoff_event_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg


# real request
class TestCalendarSampleRealRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestCalendarSampleRealRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_no_permission.ins()
        self.module_cli = self.cli.calendar

    def test_real_request_create_calendar_acl(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_acl(
                pylark.CreateCalendarACLReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_calendar_acl(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_acl(
                pylark.DeleteCalendarACLReq(
                    calendar_id="x",
                    acl_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_calendar_acl_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_acl_list(
                pylark.GetCalendarACLListReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar(pylark.CreateCalendarReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar(
                pylark.DeleteCalendarReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar(
                pylark.GetCalendarReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_calendar_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_list(pylark.GetCalendarListReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_calendar(
                pylark.UpdateCalendarReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_search_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_calendar(pylark.SearchCalendarReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_subscribe_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.subscribe_calendar(
                pylark.SubscribeCalendarReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_unsubscribe_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.unsubscribe_calendar(
                pylark.UnsubscribeCalendarReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_event(
                pylark.CreateCalendarEventReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_event(
                pylark.DeleteCalendarEventReq(
                    calendar_id="x",
                    event_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event(
                pylark.GetCalendarEventReq(
                    calendar_id="x",
                    event_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_calendar_event_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_list(
                pylark.GetCalendarEventListReq(
                    calendar_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_calendar_event(
                pylark.UpdateCalendarEventReq(
                    calendar_id="x",
                    event_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_calendar_event_attendee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_event_attendee(
                pylark.CreateCalendarEventAttendeeReq(
                    calendar_id="x",
                    event_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_calendar_event_attendee_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_attendee_list(
                pylark.GetCalendarEventAttendeeListReq(
                    calendar_id="x",
                    event_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_calendar_event_attendee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_event_attendee(
                pylark.DeleteCalendarEventAttendeeReq(
                    calendar_id="x",
                    event_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_calendar_event_attendee_chat_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_attendee_chat_member_list(
                pylark.GetCalendarEventAttendeeChatMemberListReq(
                    calendar_id="x",
                    event_id="x",
                    attendee_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_calendar_timeoff_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_timeoff_event(
                pylark.CreateCalendarTimeoffEventReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_calendar_timeoff_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_timeoff_event(
                pylark.DeleteCalendarTimeoffEventReq(
                    timeoff_event_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
