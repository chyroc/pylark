# Code generated by lark_sdk_gen. DO NOT EDIT.

from pylark.log import logger
from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest


class Test_Calendar_Sample_RequestFailed(unittest.TestCase):
    def __init__(self):
        super().__init__()
        self.cli = app_all_permission.ins()
        # self.cli.mock().MockGetTenantAccessToken(mockGetTenantAccessTokenFailed)
        # self.cli.mock().MockGetAppAccessToken(mockGetTenantAccessTokenFailed)
        self.module_cli = self.cli.calendar

    def test_request_failed_create_calendar_acl(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateCalendarACL(
                pylark.CreateCalendarACLReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_calendar_acl(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteCalendarACL(
                pylark.DeleteCalendarACLReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_calendar_acl_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetCalendarACLList(
                pylark.GetCalendarACLListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_calendar(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateCalendar(pylark.CreateCalendarReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_calendar(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteCalendar(pylark.DeleteCalendarReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_calendar(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetCalendar(pylark.GetCalendarReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_calendar_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetCalendarList(pylark.GetCalendarListReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_calendar(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateCalendar(pylark.UpdateCalendarReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_search_calendar(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.SearchCalendar(pylark.SearchCalendarReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_subscribe_calendar(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.SubscribeCalendar(
                pylark.SubscribeCalendarReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_unsubscribe_calendar(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UnsubscribeCalendar(
                pylark.UnsubscribeCalendarReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_calendar_event(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateCalendarEvent(
                pylark.CreateCalendarEventReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_calendar_event(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteCalendarEvent(
                pylark.DeleteCalendarEventReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_calendar_event(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetCalendarEvent(
                pylark.GetCalendarEventReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_calendar_event_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetCalendarEventList(
                pylark.GetCalendarEventListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_calendar_event(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateCalendarEvent(
                pylark.UpdateCalendarEventReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_calendar_event_attendee(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateCalendarEventAttendee(
                pylark.CreateCalendarEventAttendeeReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_calendar_event_attendee_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetCalendarEventAttendeeList(
                pylark.GetCalendarEventAttendeeListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_calendar_event_attendee(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteCalendarEventAttendee(
                pylark.DeleteCalendarEventAttendeeReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_calendar_event_attendee_chat_member_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetCalendarEventAttendeeChatMemberList(
                pylark.GetCalendarEventAttendeeChatMemberListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_calendar_timeoff_event(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateCalendarTimeoffEvent(
                pylark.CreateCalendarTimeoffEventReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_calendar_timeoff_event(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteCalendarTimeoffEvent(
                pylark.DeleteCalendarTimeoffEventReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")
