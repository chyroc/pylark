# Code generated by lark_sdk_gen. DO NOT EDIT.

from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest
from tests.test_helper import mock_get_tenant_access_token_failed


class TestCalendarSampleRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestCalendarSampleRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.calendar

    def test_request_failed_create_calendar_acl(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_acl(pylark.CreateCalendarACLReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_calendar_acl(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_acl(pylark.DeleteCalendarACLReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_calendar_acl_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_acl_list(pylark.GetCalendarACLListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar(pylark.CreateCalendarReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar(pylark.DeleteCalendarReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar(pylark.GetCalendarReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_calendar_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_list(pylark.GetCalendarListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_calendar(pylark.UpdateCalendarReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_search_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_calendar(pylark.SearchCalendarReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_subscribe_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.subscribe_calendar(pylark.SubscribeCalendarReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_unsubscribe_calendar(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.unsubscribe_calendar(pylark.UnsubscribeCalendarReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_event(pylark.CreateCalendarEventReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_event(pylark.DeleteCalendarEventReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event(pylark.GetCalendarEventReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_calendar_event_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_list(pylark.GetCalendarEventListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_calendar_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_calendar_event(pylark.UpdateCalendarEventReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_calendar_event_attendee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_event_attendee(
                pylark.CreateCalendarEventAttendeeReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_calendar_event_attendee_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_attendee_list(
                pylark.GetCalendarEventAttendeeListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_calendar_event_attendee(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_event_attendee(
                pylark.DeleteCalendarEventAttendeeReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_calendar_event_attendee_chat_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_calendar_event_attendee_chat_member_list(
                pylark.GetCalendarEventAttendeeChatMemberListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_calendar_timeoff_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_calendar_timeoff_event(
                pylark.CreateCalendarTimeoffEventReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_calendar_timeoff_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_calendar_timeoff_event(
                pylark.DeleteCalendarTimeoffEventReq()
            )

        assert "msg=failed" in f"{e}"
