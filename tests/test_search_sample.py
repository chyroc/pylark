# Code generated by lark_sdk_gen. DO NOT EDIT.

import unittest
import pylark
import pytest
from tests.test_conf import app_all_permission, app_no_permission
from tests.test_helper import mock_get_tenant_access_token_failed


def mock(*args, **kwargs):
    raise pylark.PyLarkError(scope="scope", func="func", code=1, msg="mock-failed")


def mock_raw_request(*args, **kwargs):
    raise pylark.PyLarkError(
        scope="scope", func="func", code=1, msg="mock-raw-request-failed"
    )


# mock get token
class TestSearchSampleMockGetTokenFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestSearchSampleMockGetTokenFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.search

    def test_mock_get_token_create_search_data_source_item(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_search_data_source_item(
                pylark.CreateSearchDataSourceItemReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_search_data_source_item(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source_item(
                pylark.GetSearchDataSourceItemReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_search_data_source_item(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_search_data_source_item(
                pylark.DeleteSearchDataSourceItemReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_search_data_source(
                pylark.CreateSearchDataSourceReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source(pylark.GetSearchDataSourceReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_search_data_source(
                pylark.UpdateSearchDataSourceReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_search_data_source_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source_list(
                pylark.GetSearchDataSourceListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_search_data_source(
                pylark.DeleteSearchDataSourceReq()
            )

        assert "msg=failed" in f"{e}"


# mock mock self func
class TestSearchSampleMockSelfFuncFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestSearchSampleMockSelfFuncFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.search

    def test_mock_self_func_create_search_data_source_item(self):
        origin_func = self.module_cli.create_search_data_source_item
        self.module_cli.create_search_data_source_item = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_search_data_source_item(
                pylark.CreateSearchDataSourceItemReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_search_data_source_item = origin_func

    def test_mock_self_func_get_search_data_source_item(self):
        origin_func = self.module_cli.get_search_data_source_item
        self.module_cli.get_search_data_source_item = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source_item(
                pylark.GetSearchDataSourceItemReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_search_data_source_item = origin_func

    def test_mock_self_func_delete_search_data_source_item(self):
        origin_func = self.module_cli.delete_search_data_source_item
        self.module_cli.delete_search_data_source_item = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_search_data_source_item(
                pylark.DeleteSearchDataSourceItemReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_search_data_source_item = origin_func

    def test_mock_self_func_create_search_data_source(self):
        origin_func = self.module_cli.create_search_data_source
        self.module_cli.create_search_data_source = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_search_data_source(
                pylark.CreateSearchDataSourceReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_search_data_source = origin_func

    def test_mock_self_func_get_search_data_source(self):
        origin_func = self.module_cli.get_search_data_source
        self.module_cli.get_search_data_source = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source(pylark.GetSearchDataSourceReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_search_data_source = origin_func

    def test_mock_self_func_update_search_data_source(self):
        origin_func = self.module_cli.update_search_data_source
        self.module_cli.update_search_data_source = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_search_data_source(
                pylark.UpdateSearchDataSourceReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_search_data_source = origin_func

    def test_mock_self_func_get_search_data_source_list(self):
        origin_func = self.module_cli.get_search_data_source_list
        self.module_cli.get_search_data_source_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source_list(
                pylark.GetSearchDataSourceListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_search_data_source_list = origin_func

    def test_mock_self_func_delete_search_data_source(self):
        origin_func = self.module_cli.delete_search_data_source
        self.module_cli.delete_search_data_source = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_search_data_source(
                pylark.DeleteSearchDataSourceReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_search_data_source = origin_func


# mock raw request
class TestSearchSampleMockRawRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestSearchSampleMockRawRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.search
        self.cli.raw_request = mock_raw_request

    def test_mock_raw_request_create_search_data_source_item(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_search_data_source_item(
                pylark.CreateSearchDataSourceItemReq(
                    data_source_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_search_data_source_item(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source_item(
                pylark.GetSearchDataSourceItemReq(
                    data_source_id="x",
                    item_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_search_data_source_item(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_search_data_source_item(
                pylark.DeleteSearchDataSourceItemReq(
                    data_source_id="x",
                    item_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_search_data_source(
                pylark.CreateSearchDataSourceReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source(
                pylark.GetSearchDataSourceReq(
                    data_source_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_search_data_source(
                pylark.UpdateSearchDataSourceReq(
                    data_source_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_search_data_source_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source_list(
                pylark.GetSearchDataSourceListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_search_data_source(
                pylark.DeleteSearchDataSourceReq(
                    data_source_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg


# real request
class TestSearchSampleRealRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestSearchSampleRealRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_no_permission.ins()
        self.module_cli = self.cli.search

    def test_real_request_create_search_data_source_item(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_search_data_source_item(
                pylark.CreateSearchDataSourceItemReq(
                    data_source_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_search_data_source_item(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source_item(
                pylark.GetSearchDataSourceItemReq(
                    data_source_id="x",
                    item_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_search_data_source_item(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_search_data_source_item(
                pylark.DeleteSearchDataSourceItemReq(
                    data_source_id="x",
                    item_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_search_data_source(
                pylark.CreateSearchDataSourceReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source(
                pylark.GetSearchDataSourceReq(
                    data_source_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_search_data_source(
                pylark.UpdateSearchDataSourceReq(
                    data_source_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_search_data_source_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source_list(
                pylark.GetSearchDataSourceListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_search_data_source(
                pylark.DeleteSearchDataSourceReq(
                    data_source_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
