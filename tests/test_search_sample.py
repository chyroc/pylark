# Code generated by lark_sdk_gen. DO NOT EDIT.

from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest
from tests.test_helper import mock_get_tenant_access_token_failed


class TestSearchSampleRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestSearchSampleRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.search

    def test_request_failed_create_search_data_source_item(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_search_data_source_item(
                pylark.CreateSearchDataSourceItemReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_search_data_source_item(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source_item(
                pylark.GetSearchDataSourceItemReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_search_data_source_item(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_search_data_source_item(
                pylark.DeleteSearchDataSourceItemReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_search_data_source(
                pylark.CreateSearchDataSourceReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source(pylark.GetSearchDataSourceReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_search_data_source(
                pylark.UpdateSearchDataSourceReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_search_data_source_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_search_data_source_list(
                pylark.GetSearchDataSourceListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_search_data_source(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_search_data_source(
                pylark.DeleteSearchDataSourceReq()
            )

        assert "msg=failed" in f"{e}"
