# Code generated by lark_sdk_gen. DO NOT EDIT.

from pylark.log import logger
from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest


class Test_Search_Sample_RequestFailed(unittest.TestCase):
    def __init__(self):
        super().__init__()
        self.cli = app_all_permission.ins()
        # self.cli.mock().MockGetTenantAccessToken(mockGetTenantAccessTokenFailed)
        # self.cli.mock().MockGetAppAccessToken(mockGetTenantAccessTokenFailed)
        self.module_cli = self.cli.search

    def test_request_failed_create_search_data_source_item(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateSearchDataSourceItem(
                pylark.CreateSearchDataSourceItemReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_search_data_source_item(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetSearchDataSourceItem(
                pylark.GetSearchDataSourceItemReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_search_data_source_item(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteSearchDataSourceItem(
                pylark.DeleteSearchDataSourceItemReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_search_data_source(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateSearchDataSource(
                pylark.CreateSearchDataSourceReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_search_data_source(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetSearchDataSource(
                pylark.GetSearchDataSourceReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_search_data_source(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateSearchDataSource(
                pylark.UpdateSearchDataSourceReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_search_data_source_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetSearchDataSourceList(
                pylark.GetSearchDataSourceListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_search_data_source(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteSearchDataSource(
                pylark.DeleteSearchDataSourceReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")
