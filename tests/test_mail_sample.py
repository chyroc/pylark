# Code generated by lark_sdk_gen. DO NOT EDIT.

import unittest
import pylark
import pytest
from tests.test_conf import app_all_permission, app_no_permission
from tests.test_helper import mock_get_tenant_access_token_failed


def mock(*args, **kwargs):
    raise pylark.PyLarkError(scope="scope", func="func", code=1, msg="mock-failed")


def mock_raw_request(*args, **kwargs):
    raise pylark.PyLarkError(
        scope="scope", func="func", code=1, msg="mock-raw-request-failed"
    )


# mock get token
class TestMailSampleMockGetTokenFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestMailSampleMockGetTokenFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.mail

    def test_mock_get_token_create_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mailgroup(pylark.CreateMailGroupReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mailgroup(pylark.GetMailGroupReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_mail_group_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_list(pylark.GetMailGroupListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_mail_group_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_mail_group_patch(pylark.UpdateMailGroupPatchReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_mailgroup(pylark.UpdateMailGroupReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mailgroup(pylark.DeleteMailGroupReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_mail_group_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mail_group_member(pylark.CreateMailGroupMemberReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_mail_group_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_member(pylark.GetMailGroupMemberReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_mail_group_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_member_list(
                pylark.GetMailGroupMemberListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_mail_group_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mail_group_member(pylark.DeleteMailGroupMemberReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_mail_group_permission_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mail_group_permission_member(
                pylark.CreateMailGroupPermissionMemberReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_mail_group_permission_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_permission_member(
                pylark.GetMailGroupPermissionMemberReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_mail_group_permission_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_permission_member_list(
                pylark.GetMailGroupPermissionMemberListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_mail_group_permission_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mail_group_permission_member(
                pylark.DeleteMailGroupPermissionMemberReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_public_mailbox(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_public_mailbox(pylark.CreatePublicMailboxReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_public_mailbox(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox(pylark.GetPublicMailboxReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_public_mailbox_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_list(pylark.GetPublicMailboxListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_public_mailbox_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_public_mailbox_patch(
                pylark.UpdatePublicMailboxPatchReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_public_mailbox(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_public_mailbox(pylark.UpdatePublicMailboxReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_public_mailbox_member(
                pylark.CreatePublicMailboxMemberReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_member(
                pylark.GetPublicMailboxMemberReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_public_mailbox_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_member_list(
                pylark.GetPublicMailboxMemberListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_public_mailbox_member(
                pylark.DeletePublicMailboxMemberReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_clear_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.clear_public_mailbox_member(
                pylark.ClearPublicMailboxMemberReq()
            )

        assert "msg=failed" in f"{e}"


# mock mock self func
class TestMailSampleMockSelfFuncFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestMailSampleMockSelfFuncFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.mail

    def test_mock_self_func_create_mailgroup(self):
        origin_func = self.module_cli.create_mailgroup
        self.module_cli.create_mailgroup = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mailgroup(pylark.CreateMailGroupReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_mailgroup = origin_func

    def test_mock_self_func_get_mailgroup(self):
        origin_func = self.module_cli.get_mailgroup
        self.module_cli.get_mailgroup = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mailgroup(pylark.GetMailGroupReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_mailgroup = origin_func

    def test_mock_self_func_get_mail_group_list(self):
        origin_func = self.module_cli.get_mail_group_list
        self.module_cli.get_mail_group_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_list(pylark.GetMailGroupListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_mail_group_list = origin_func

    def test_mock_self_func_update_mail_group_patch(self):
        origin_func = self.module_cli.update_mail_group_patch
        self.module_cli.update_mail_group_patch = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_mail_group_patch(pylark.UpdateMailGroupPatchReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_mail_group_patch = origin_func

    def test_mock_self_func_update_mailgroup(self):
        origin_func = self.module_cli.update_mailgroup
        self.module_cli.update_mailgroup = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_mailgroup(pylark.UpdateMailGroupReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_mailgroup = origin_func

    def test_mock_self_func_delete_mailgroup(self):
        origin_func = self.module_cli.delete_mailgroup
        self.module_cli.delete_mailgroup = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mailgroup(pylark.DeleteMailGroupReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_mailgroup = origin_func

    def test_mock_self_func_create_mail_group_member(self):
        origin_func = self.module_cli.create_mail_group_member
        self.module_cli.create_mail_group_member = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mail_group_member(pylark.CreateMailGroupMemberReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_mail_group_member = origin_func

    def test_mock_self_func_get_mail_group_member(self):
        origin_func = self.module_cli.get_mail_group_member
        self.module_cli.get_mail_group_member = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_member(pylark.GetMailGroupMemberReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_mail_group_member = origin_func

    def test_mock_self_func_get_mail_group_member_list(self):
        origin_func = self.module_cli.get_mail_group_member_list
        self.module_cli.get_mail_group_member_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_member_list(
                pylark.GetMailGroupMemberListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_mail_group_member_list = origin_func

    def test_mock_self_func_delete_mail_group_member(self):
        origin_func = self.module_cli.delete_mail_group_member
        self.module_cli.delete_mail_group_member = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mail_group_member(pylark.DeleteMailGroupMemberReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_mail_group_member = origin_func

    def test_mock_self_func_create_mail_group_permission_member(self):
        origin_func = self.module_cli.create_mail_group_permission_member
        self.module_cli.create_mail_group_permission_member = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mail_group_permission_member(
                pylark.CreateMailGroupPermissionMemberReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_mail_group_permission_member = origin_func

    def test_mock_self_func_get_mail_group_permission_member(self):
        origin_func = self.module_cli.get_mail_group_permission_member
        self.module_cli.get_mail_group_permission_member = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_permission_member(
                pylark.GetMailGroupPermissionMemberReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_mail_group_permission_member = origin_func

    def test_mock_self_func_get_mail_group_permission_member_list(self):
        origin_func = self.module_cli.get_mail_group_permission_member_list
        self.module_cli.get_mail_group_permission_member_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_permission_member_list(
                pylark.GetMailGroupPermissionMemberListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_mail_group_permission_member_list = origin_func

    def test_mock_self_func_delete_mail_group_permission_member(self):
        origin_func = self.module_cli.delete_mail_group_permission_member
        self.module_cli.delete_mail_group_permission_member = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mail_group_permission_member(
                pylark.DeleteMailGroupPermissionMemberReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_mail_group_permission_member = origin_func

    def test_mock_self_func_create_public_mailbox(self):
        origin_func = self.module_cli.create_public_mailbox
        self.module_cli.create_public_mailbox = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_public_mailbox(pylark.CreatePublicMailboxReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_public_mailbox = origin_func

    def test_mock_self_func_get_public_mailbox(self):
        origin_func = self.module_cli.get_public_mailbox
        self.module_cli.get_public_mailbox = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox(pylark.GetPublicMailboxReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_public_mailbox = origin_func

    def test_mock_self_func_get_public_mailbox_list(self):
        origin_func = self.module_cli.get_public_mailbox_list
        self.module_cli.get_public_mailbox_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_list(pylark.GetPublicMailboxListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_public_mailbox_list = origin_func

    def test_mock_self_func_update_public_mailbox_patch(self):
        origin_func = self.module_cli.update_public_mailbox_patch
        self.module_cli.update_public_mailbox_patch = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_public_mailbox_patch(
                pylark.UpdatePublicMailboxPatchReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_public_mailbox_patch = origin_func

    def test_mock_self_func_update_public_mailbox(self):
        origin_func = self.module_cli.update_public_mailbox
        self.module_cli.update_public_mailbox = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_public_mailbox(pylark.UpdatePublicMailboxReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_public_mailbox = origin_func

    def test_mock_self_func_create_public_mailbox_member(self):
        origin_func = self.module_cli.create_public_mailbox_member
        self.module_cli.create_public_mailbox_member = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_public_mailbox_member(
                pylark.CreatePublicMailboxMemberReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_public_mailbox_member = origin_func

    def test_mock_self_func_get_public_mailbox_member(self):
        origin_func = self.module_cli.get_public_mailbox_member
        self.module_cli.get_public_mailbox_member = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_member(
                pylark.GetPublicMailboxMemberReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_public_mailbox_member = origin_func

    def test_mock_self_func_get_public_mailbox_member_list(self):
        origin_func = self.module_cli.get_public_mailbox_member_list
        self.module_cli.get_public_mailbox_member_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_member_list(
                pylark.GetPublicMailboxMemberListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_public_mailbox_member_list = origin_func

    def test_mock_self_func_delete_public_mailbox_member(self):
        origin_func = self.module_cli.delete_public_mailbox_member
        self.module_cli.delete_public_mailbox_member = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_public_mailbox_member(
                pylark.DeletePublicMailboxMemberReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_public_mailbox_member = origin_func

    def test_mock_self_func_clear_public_mailbox_member(self):
        origin_func = self.module_cli.clear_public_mailbox_member
        self.module_cli.clear_public_mailbox_member = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.clear_public_mailbox_member(
                pylark.ClearPublicMailboxMemberReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.clear_public_mailbox_member = origin_func


# mock raw request
class TestMailSampleMockRawRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestMailSampleMockRawRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.mail
        self.cli.raw_request = mock_raw_request

    def test_mock_raw_request_create_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mailgroup(pylark.CreateMailGroupReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mailgroup(
                pylark.GetMailGroupReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_mail_group_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_list(pylark.GetMailGroupListReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_mail_group_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_mail_group_patch(
                pylark.UpdateMailGroupPatchReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_mailgroup(
                pylark.UpdateMailGroupReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mailgroup(
                pylark.DeleteMailGroupReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_mail_group_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mail_group_member(
                pylark.CreateMailGroupMemberReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_mail_group_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_member(
                pylark.GetMailGroupMemberReq(
                    mailgroup_id="x",
                    member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_mail_group_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_member_list(
                pylark.GetMailGroupMemberListReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_mail_group_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mail_group_member(
                pylark.DeleteMailGroupMemberReq(
                    mailgroup_id="x",
                    member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_mail_group_permission_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mail_group_permission_member(
                pylark.CreateMailGroupPermissionMemberReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_mail_group_permission_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_permission_member(
                pylark.GetMailGroupPermissionMemberReq(
                    mailgroup_id="x",
                    permission_member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_mail_group_permission_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_permission_member_list(
                pylark.GetMailGroupPermissionMemberListReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_mail_group_permission_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mail_group_permission_member(
                pylark.DeleteMailGroupPermissionMemberReq(
                    mailgroup_id="x",
                    permission_member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_public_mailbox(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_public_mailbox(pylark.CreatePublicMailboxReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_public_mailbox(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox(
                pylark.GetPublicMailboxReq(
                    public_mailbox_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_public_mailbox_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_list(pylark.GetPublicMailboxListReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_public_mailbox_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_public_mailbox_patch(
                pylark.UpdatePublicMailboxPatchReq(
                    public_mailbox_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_public_mailbox(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_public_mailbox(
                pylark.UpdatePublicMailboxReq(
                    public_mailbox_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_public_mailbox_member(
                pylark.CreatePublicMailboxMemberReq(
                    public_mailbox_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_member(
                pylark.GetPublicMailboxMemberReq(
                    public_mailbox_id="x",
                    member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_public_mailbox_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_member_list(
                pylark.GetPublicMailboxMemberListReq(
                    public_mailbox_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_public_mailbox_member(
                pylark.DeletePublicMailboxMemberReq(
                    public_mailbox_id="x",
                    member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_clear_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.clear_public_mailbox_member(
                pylark.ClearPublicMailboxMemberReq(
                    public_mailbox_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg


# real request
class TestMailSampleRealRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestMailSampleRealRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_no_permission.ins()
        self.module_cli = self.cli.mail

    def test_real_request_create_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mailgroup(pylark.CreateMailGroupReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mailgroup(
                pylark.GetMailGroupReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_mail_group_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_list(pylark.GetMailGroupListReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_mail_group_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_mail_group_patch(
                pylark.UpdateMailGroupPatchReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_mailgroup(
                pylark.UpdateMailGroupReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mailgroup(
                pylark.DeleteMailGroupReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_mail_group_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mail_group_member(
                pylark.CreateMailGroupMemberReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_mail_group_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_member(
                pylark.GetMailGroupMemberReq(
                    mailgroup_id="x",
                    member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_mail_group_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_member_list(
                pylark.GetMailGroupMemberListReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_mail_group_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mail_group_member(
                pylark.DeleteMailGroupMemberReq(
                    mailgroup_id="x",
                    member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_mail_group_permission_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mail_group_permission_member(
                pylark.CreateMailGroupPermissionMemberReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_mail_group_permission_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_permission_member(
                pylark.GetMailGroupPermissionMemberReq(
                    mailgroup_id="x",
                    permission_member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_mail_group_permission_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_permission_member_list(
                pylark.GetMailGroupPermissionMemberListReq(
                    mailgroup_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_mail_group_permission_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mail_group_permission_member(
                pylark.DeleteMailGroupPermissionMemberReq(
                    mailgroup_id="x",
                    permission_member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_public_mailbox(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_public_mailbox(pylark.CreatePublicMailboxReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_public_mailbox(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox(
                pylark.GetPublicMailboxReq(
                    public_mailbox_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_public_mailbox_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_list(pylark.GetPublicMailboxListReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_public_mailbox_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_public_mailbox_patch(
                pylark.UpdatePublicMailboxPatchReq(
                    public_mailbox_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_public_mailbox(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_public_mailbox(
                pylark.UpdatePublicMailboxReq(
                    public_mailbox_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_public_mailbox_member(
                pylark.CreatePublicMailboxMemberReq(
                    public_mailbox_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_member(
                pylark.GetPublicMailboxMemberReq(
                    public_mailbox_id="x",
                    member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_public_mailbox_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_member_list(
                pylark.GetPublicMailboxMemberListReq(
                    public_mailbox_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_public_mailbox_member(
                pylark.DeletePublicMailboxMemberReq(
                    public_mailbox_id="x",
                    member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_clear_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.clear_public_mailbox_member(
                pylark.ClearPublicMailboxMemberReq(
                    public_mailbox_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
