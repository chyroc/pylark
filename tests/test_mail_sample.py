# Code generated by lark_sdk_gen. DO NOT EDIT.

from pylark.log import logger
from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest


class Test_Mail_Sample_RequestFailed(unittest.TestCase):
    def __init__(self):
        super().__init__()
        self.cli = app_all_permission.ins()
        # self.cli.mock().MockGetTenantAccessToken(mockGetTenantAccessTokenFailed)
        # self.cli.mock().MockGetAppAccessToken(mockGetTenantAccessTokenFailed)
        self.module_cli = self.cli.mail

    def test_request_failed_create_mailgroup(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateMailGroup(pylark.CreateMailGroupReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_mailgroup(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetMailGroup(pylark.GetMailGroupReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_mail_group_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetMailGroupList(
                pylark.GetMailGroupListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_mail_group_patch(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateMailGroupPatch(
                pylark.UpdateMailGroupPatchReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_mailgroup(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdateMailGroup(pylark.UpdateMailGroupReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_mailgroup(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteMailGroup(pylark.DeleteMailGroupReq())
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_mail_group_member(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateMailGroupMember(
                pylark.CreateMailGroupMemberReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_mail_group_member(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetMailGroupMember(
                pylark.GetMailGroupMemberReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_mail_group_member_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetMailGroupMemberList(
                pylark.GetMailGroupMemberListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_mail_group_member(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteMailGroupMember(
                pylark.DeleteMailGroupMemberReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_mail_group_permission_member(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreateMailGroupPermissionMember(
                pylark.CreateMailGroupPermissionMemberReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_mail_group_permission_member(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetMailGroupPermissionMember(
                pylark.GetMailGroupPermissionMemberReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_mail_group_permission_member_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetMailGroupPermissionMemberList(
                pylark.GetMailGroupPermissionMemberListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_mail_group_permission_member(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeleteMailGroupPermissionMember(
                pylark.DeleteMailGroupPermissionMemberReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_public_mailbox(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreatePublicMailbox(
                pylark.CreatePublicMailboxReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_public_mailbox(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetPublicMailbox(
                pylark.GetPublicMailboxReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_public_mailbox_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetPublicMailboxList(
                pylark.GetPublicMailboxListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_public_mailbox_patch(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdatePublicMailboxPatch(
                pylark.UpdatePublicMailboxPatchReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_update_public_mailbox(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.UpdatePublicMailbox(
                pylark.UpdatePublicMailboxReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_create_public_mailbox_member(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.CreatePublicMailboxMember(
                pylark.CreatePublicMailboxMemberReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_public_mailbox_member(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetPublicMailboxMember(
                pylark.GetPublicMailboxMemberReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_get_public_mailbox_member_list(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.GetPublicMailboxMemberList(
                pylark.GetPublicMailboxMemberListReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_delete_public_mailbox_member(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.DeletePublicMailboxMember(
                pylark.DeletePublicMailboxMemberReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")

    def test_request_failed_clear_public_mailbox_member(self):
        with pytest.raises(ZeroDivisionError) as e:
            res, response = self.module_cli.ClearPublicMailboxMember(
                pylark.ClearPublicMailboxMemberReq()
            )
            print("e", e)

            # as.NotNil(err)
            # as.Equal(err.Error(), "failed")
