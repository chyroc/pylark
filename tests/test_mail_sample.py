# Code generated by lark_sdk_gen. DO NOT EDIT.

from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest
from tests.test_helper import mock_get_tenant_access_token_failed


class TestMailSampleRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestMailSampleRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.mail

    def test_request_failed_create_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mailgroup(pylark.CreateMailGroupReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mailgroup(pylark.GetMailGroupReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_mail_group_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_list(pylark.GetMailGroupListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_mail_group_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_mail_group_patch(pylark.UpdateMailGroupPatchReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_mailgroup(pylark.UpdateMailGroupReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_mailgroup(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mailgroup(pylark.DeleteMailGroupReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_mail_group_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mail_group_member(pylark.CreateMailGroupMemberReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_mail_group_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_member(pylark.GetMailGroupMemberReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_mail_group_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_member_list(
                pylark.GetMailGroupMemberListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_mail_group_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mail_group_member(pylark.DeleteMailGroupMemberReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_mail_group_permission_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_mail_group_permission_member(
                pylark.CreateMailGroupPermissionMemberReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_mail_group_permission_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_permission_member(
                pylark.GetMailGroupPermissionMemberReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_mail_group_permission_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_mail_group_permission_member_list(
                pylark.GetMailGroupPermissionMemberListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_mail_group_permission_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_mail_group_permission_member(
                pylark.DeleteMailGroupPermissionMemberReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_public_mailbox(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_public_mailbox(pylark.CreatePublicMailboxReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_public_mailbox(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox(pylark.GetPublicMailboxReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_public_mailbox_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_list(pylark.GetPublicMailboxListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_public_mailbox_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_public_mailbox_patch(
                pylark.UpdatePublicMailboxPatchReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_public_mailbox(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_public_mailbox(pylark.UpdatePublicMailboxReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_public_mailbox_member(
                pylark.CreatePublicMailboxMemberReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_member(
                pylark.GetPublicMailboxMemberReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_public_mailbox_member_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_public_mailbox_member_list(
                pylark.GetPublicMailboxMemberListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_public_mailbox_member(
                pylark.DeletePublicMailboxMemberReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_clear_public_mailbox_member(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.clear_public_mailbox_member(
                pylark.ClearPublicMailboxMemberReq()
            )

        assert "msg=failed" in f"{e}"
