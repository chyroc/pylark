# Code generated by lark_sdk_gen. DO NOT EDIT.

from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest
from tests.test_helper import mock_get_tenant_access_token_failed


class TestHelpdeskSampleRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestHelpdeskSampleRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.helpdesk

    def test_request_failed_start_helpdesk_service(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.start_helpdesk_service(pylark.StartHelpdeskServiceReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_ticket(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_ticket(pylark.GetHelpdeskTicketReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_ticket_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_ticket_list(pylark.GetHelpdeskTicketListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_download_helpdesk_ticket_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_helpdesk_ticket_image(
                pylark.DownloadHelpdeskTicketImageReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_answer_helpdesk_ticket_user_query(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.answer_helpdesk_ticket_user_query(
                pylark.AnswerHelpdeskTicketUserQueryReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_ticket_message_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_ticket_message_list(
                pylark.GetHelpdeskTicketMessageListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_send_helpdesk_ticket_message(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.send_helpdesk_ticket_message(
                pylark.SendHelpdeskTicketMessageReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_ticket_customized_field_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_ticket_customized_field_list(
                pylark.GetHelpdeskTicketCustomizedFieldListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_ticket_customized_field(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_ticket_customized_field(
                pylark.GetHelpdeskTicketCustomizedFieldReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_category(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_category(pylark.GetHelpdeskCategoryReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_category_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_category_list(
                pylark.GetHelpdeskCategoryListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_faq(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_faq(pylark.GetHelpdeskFAQReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_faq_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_faq_list(pylark.GetHelpdeskFAQListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_faq_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_faq_image(pylark.GetHelpdeskFAQImageReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_search_helpdesk_faq(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.search_helpdesk_faq(pylark.SearchHelpdeskFAQReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_agent_email(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_agent_email(pylark.GetHelpdeskAgentEmailReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_agent_schedule(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_agent_schedule(
                pylark.GetHelpdeskAgentScheduleReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_agent_schedule_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_agent_schedule_list(
                pylark.GetHelpdeskAgentScheduleListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_agent_skill(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_agent_skill(pylark.GetHelpdeskAgentSkillReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_agent_skill_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_agent_skill_list(
                pylark.GetHelpdeskAgentSkillListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_helpdesk_agent_skill_rule_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_helpdesk_agent_skill_rule_list(
                pylark.GetHelpdeskAgentSkillRuleListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_subscribe_helpdesk_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.subscribe_helpdesk_event(pylark.SubscribeHelpdeskEventReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_unsubscribe_helpdesk_event(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.unsubscribe_helpdesk_event(
                pylark.UnsubscribeHelpdeskEventReq()
            )

        assert "msg=failed" in f"{e}"
