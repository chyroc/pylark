# Code generated by lark_sdk_gen. DO NOT EDIT.

import unittest
import pylark
import pytest
from tests.test_conf import app_all_permission, app_no_permission
from tests.test_helper import mock_get_tenant_access_token_failed


def mock(*args, **kwargs):
    raise pylark.PyLarkError(scope="scope", func="func", code=1, msg="mock-failed")


def mock_raw_request(*args, **kwargs):
    raise pylark.PyLarkError(
        scope="scope", func="func", code=1, msg="mock-raw-request-failed"
    )


# mock get token
class TestDriveSampleMockGetTokenFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestDriveSampleMockGetTokenFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.drive

    def test_mock_get_token_get_drive_file_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_file_meta(pylark.GetDriveFileMetaReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_file(pylark.CreateDriveFileReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_copy_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.copy_drive_file(pylark.CopyDriveFileReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_file(pylark.DeleteDriveFileReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_drive_sheet_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_sheet_file(pylark.DeleteDriveSheetFileReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_drive_folder(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_folder(pylark.CreateDriveFolderReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_drive_folder_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_folder_meta(pylark.GetDriveFolderMetaReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_drive_root_folder_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_root_folder_meta(
                pylark.GetDriveRootFolderMetaReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_drive_folder_children(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_folder_children(
                pylark.GetDriveFolderChildrenReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_drive_file_statistics(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_file_statistics(
                pylark.GetDriveFileStatisticsReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_download_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_drive_file(pylark.DownloadDriveFileReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_drive_file(pylark.UploadDriveFileReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_prepare_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepare_upload_drive_file(
                pylark.PrepareUploadDriveFileReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_part_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.part_upload_drive_file(pylark.PartUploadDriveFileReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_finish_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.finish_upload_drive_file(pylark.FinishUploadDriveFileReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_download_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_drive_media(pylark.DownloadDriveMediaReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_drive_media(pylark.UploadDriveMediaReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_prepare_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepare_upload_drive_media(
                pylark.PrepareUploadDriveMediaReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_part_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.part_upload_drive_media(pylark.PartUploadDriveMediaReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_finish_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.finish_upload_drive_media(
                pylark.FinishUploadDriveMediaReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_drive_member_permission_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_member_permission_old(
                pylark.CreateDriveMemberPermissionOldReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_transfer_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.transfer_drive_member_permission(
                pylark.TransferDriveMemberPermissionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_drive_member_permission_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_member_permission_list(
                pylark.GetDriveMemberPermissionListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_member_permission(
                pylark.CreateDriveMemberPermissionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_drive_member_permission_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_member_permission_old(
                pylark.DeleteDriveMemberPermissionOldReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_member_permission(
                pylark.DeleteDriveMemberPermissionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_drive_member_permission_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_member_permission_old(
                pylark.UpdateDriveMemberPermissionOldReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_member_permission(
                pylark.UpdateDriveMemberPermissionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_check_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.check_drive_member_permission(
                pylark.CheckDriveMemberPermissionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_drive_public_permission_v1_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission_v1_old(
                pylark.UpdateDrivePublicPermissionV1OldReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_drive_public_permission_v2_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission_v2_old(
                pylark.UpdateDrivePublicPermissionV2OldReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_drive_public_permission_v2(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_public_permission_v2(
                pylark.GetDrivePublicPermissionV2Req()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_drive_public_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission(
                pylark.UpdateDrivePublicPermissionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_get_drive_media_tmp_download_url(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_drive_media_tmp_download_url(
                pylark.BatchGetDriveMediaTmpDownloadURLReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_drive_comment_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_comment_list(pylark.GetDriveCommentListReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_comment(pylark.GetDriveCommentReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_comment(pylark.CreateDriveCommentReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_comment(pylark.UpdateDriveCommentReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_comment(pylark.DeleteDriveCommentReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_drive_comment_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_comment_patch(
                pylark.UpdateDriveCommentPatchReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_drive_doc(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_doc(pylark.CreateDriveDocReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_drive_doc_content(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_content(pylark.GetDriveDocContentReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_drive_doc_raw_content(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_raw_content(pylark.GetDriveDocRawContentReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_drive_doc_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_meta(pylark.GetDriveDocMetaReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet(pylark.CreateSheetReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_sheet_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_meta(pylark.GetSheetMetaReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_sheet_property(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_property(pylark.UpdateSheetPropertyReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_update_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_update_sheet(pylark.BatchUpdateSheetReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_import_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.import_sheet(pylark.ImportSheetReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_drive_import_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_import_task(pylark.CreateDriveImportTaskReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_drive_import_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_import_task(pylark.GetDriveImportTaskReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_move_sheet_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.move_sheet_dimension(pylark.MoveSheetDimensionReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_prepend_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepend_sheet_value(pylark.PrependSheetValueReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_append_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.append_sheet_value(pylark.AppendSheetValueReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_insert_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.insert_sheet_dimension_range(
                pylark.InsertSheetDimensionRangeReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_add_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.add_sheet_dimension_range(
                pylark.AddSheetDimensionRangeReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_dimension_range(
                pylark.UpdateSheetDimensionRangeReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_dimension_range(
                pylark.DeleteSheetDimensionRangeReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_value(pylark.GetSheetValueReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_get_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_sheet_value(pylark.BatchGetSheetValueReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_set_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_value(pylark.SetSheetValueReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_set_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_set_sheet_value(pylark.BatchSetSheetValueReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_set_sheet_style(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_style(pylark.SetSheetStyleReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_batch_set_sheet_style(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_set_sheet_style(pylark.BatchSetSheetStyleReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_merge_sheet_cell(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.merge_sheet_cell(pylark.MergeSheetCellReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_unmerge_sheet_cell(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.unmerge_sheet_cell(pylark.UnmergeSheetCellReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_set_sheet_value_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_value_image(pylark.SetSheetValueImageReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_find_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.find_sheet(pylark.FindSheetReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_replace_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.replace_sheet(pylark.ReplaceSheetReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_condition_format(
                pylark.CreateSheetConditionFormatReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_condition_format(
                pylark.GetSheetConditionFormatReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_condition_format(
                pylark.UpdateSheetConditionFormatReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_condition_format(
                pylark.DeleteSheetConditionFormatReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_protected_dimension(
                pylark.CreateSheetProtectedDimensionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_protected_dimension(
                pylark.GetSheetProtectedDimensionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_protected_dimension(
                pylark.UpdateSheetProtectedDimensionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_protected_dimension(
                pylark.DeleteSheetProtectedDimensionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_data_validation_dropdown(
                pylark.CreateSheetDataValidationDropdownReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_data_validation_dropdown(
                pylark.DeleteSheetDataValidationDropdownReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_data_validation_dropdown(
                pylark.UpdateSheetDataValidationDropdownReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_data_validation_dropdown(
                pylark.GetSheetDataValidationDropdownReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter(pylark.CreateSheetFilterReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter(pylark.DeleteSheetFilterReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter(pylark.UpdateSheetFilterReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter(pylark.GetSheetFilterReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter_view(pylark.CreateSheetFilterViewReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter_view(pylark.DeleteSheetFilterViewReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter_view(pylark.UpdateSheetFilterViewReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter_view(pylark.GetSheetFilterViewReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_query_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_filter_view(pylark.QuerySheetFilterViewReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter_view_condition(
                pylark.CreateSheetFilterViewConditionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter_view_condition(
                pylark.DeleteSheetFilterViewConditionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter_view_condition(
                pylark.UpdateSheetFilterViewConditionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter_view_condition(
                pylark.GetSheetFilterViewConditionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_query_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_filter_view_condition(
                pylark.QuerySheetFilterViewConditionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_create_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_float_image(pylark.CreateSheetFloatImageReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_delete_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_float_image(pylark.DeleteSheetFloatImageReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_update_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_float_image(pylark.UpdateSheetFloatImageReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_get_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_float_image(pylark.GetSheetFloatImageReq())

        assert "msg=failed" in f"{e}"

    def test_mock_get_token_query_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_float_image(pylark.QuerySheetFloatImageReq())

        assert "msg=failed" in f"{e}"


# mock mock self func
class TestDriveSampleMockSelfFuncFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestDriveSampleMockSelfFuncFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.drive

    def test_mock_self_func_get_drive_file_meta(self):
        origin_func = self.module_cli.get_drive_file_meta
        self.module_cli.get_drive_file_meta = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_file_meta(pylark.GetDriveFileMetaReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_drive_file_meta = origin_func

    def test_mock_self_func_create_drive_file(self):
        origin_func = self.module_cli.create_drive_file
        self.module_cli.create_drive_file = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_file(pylark.CreateDriveFileReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_drive_file = origin_func

    def test_mock_self_func_copy_drive_file(self):
        origin_func = self.module_cli.copy_drive_file
        self.module_cli.copy_drive_file = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.copy_drive_file(pylark.CopyDriveFileReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.copy_drive_file = origin_func

    def test_mock_self_func_delete_drive_file(self):
        origin_func = self.module_cli.delete_drive_file
        self.module_cli.delete_drive_file = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_file(pylark.DeleteDriveFileReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_drive_file = origin_func

    def test_mock_self_func_delete_drive_sheet_file(self):
        origin_func = self.module_cli.delete_drive_sheet_file
        self.module_cli.delete_drive_sheet_file = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_sheet_file(pylark.DeleteDriveSheetFileReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_drive_sheet_file = origin_func

    def test_mock_self_func_create_drive_folder(self):
        origin_func = self.module_cli.create_drive_folder
        self.module_cli.create_drive_folder = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_folder(pylark.CreateDriveFolderReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_drive_folder = origin_func

    def test_mock_self_func_get_drive_folder_meta(self):
        origin_func = self.module_cli.get_drive_folder_meta
        self.module_cli.get_drive_folder_meta = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_folder_meta(pylark.GetDriveFolderMetaReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_drive_folder_meta = origin_func

    def test_mock_self_func_get_drive_root_folder_meta(self):
        origin_func = self.module_cli.get_drive_root_folder_meta
        self.module_cli.get_drive_root_folder_meta = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_root_folder_meta(
                pylark.GetDriveRootFolderMetaReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_drive_root_folder_meta = origin_func

    def test_mock_self_func_get_drive_folder_children(self):
        origin_func = self.module_cli.get_drive_folder_children
        self.module_cli.get_drive_folder_children = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_folder_children(
                pylark.GetDriveFolderChildrenReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_drive_folder_children = origin_func

    def test_mock_self_func_get_drive_file_statistics(self):
        origin_func = self.module_cli.get_drive_file_statistics
        self.module_cli.get_drive_file_statistics = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_file_statistics(
                pylark.GetDriveFileStatisticsReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_drive_file_statistics = origin_func

    def test_mock_self_func_download_drive_file(self):
        origin_func = self.module_cli.download_drive_file
        self.module_cli.download_drive_file = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_drive_file(pylark.DownloadDriveFileReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.download_drive_file = origin_func

    def test_mock_self_func_upload_drive_file(self):
        origin_func = self.module_cli.upload_drive_file
        self.module_cli.upload_drive_file = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_drive_file(pylark.UploadDriveFileReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.upload_drive_file = origin_func

    def test_mock_self_func_prepare_upload_drive_file(self):
        origin_func = self.module_cli.prepare_upload_drive_file
        self.module_cli.prepare_upload_drive_file = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepare_upload_drive_file(
                pylark.PrepareUploadDriveFileReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.prepare_upload_drive_file = origin_func

    def test_mock_self_func_part_upload_drive_file(self):
        origin_func = self.module_cli.part_upload_drive_file
        self.module_cli.part_upload_drive_file = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.part_upload_drive_file(pylark.PartUploadDriveFileReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.part_upload_drive_file = origin_func

    def test_mock_self_func_finish_upload_drive_file(self):
        origin_func = self.module_cli.finish_upload_drive_file
        self.module_cli.finish_upload_drive_file = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.finish_upload_drive_file(pylark.FinishUploadDriveFileReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.finish_upload_drive_file = origin_func

    def test_mock_self_func_download_drive_media(self):
        origin_func = self.module_cli.download_drive_media
        self.module_cli.download_drive_media = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_drive_media(pylark.DownloadDriveMediaReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.download_drive_media = origin_func

    def test_mock_self_func_upload_drive_media(self):
        origin_func = self.module_cli.upload_drive_media
        self.module_cli.upload_drive_media = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_drive_media(pylark.UploadDriveMediaReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.upload_drive_media = origin_func

    def test_mock_self_func_prepare_upload_drive_media(self):
        origin_func = self.module_cli.prepare_upload_drive_media
        self.module_cli.prepare_upload_drive_media = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepare_upload_drive_media(
                pylark.PrepareUploadDriveMediaReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.prepare_upload_drive_media = origin_func

    def test_mock_self_func_part_upload_drive_media(self):
        origin_func = self.module_cli.part_upload_drive_media
        self.module_cli.part_upload_drive_media = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.part_upload_drive_media(pylark.PartUploadDriveMediaReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.part_upload_drive_media = origin_func

    def test_mock_self_func_finish_upload_drive_media(self):
        origin_func = self.module_cli.finish_upload_drive_media
        self.module_cli.finish_upload_drive_media = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.finish_upload_drive_media(
                pylark.FinishUploadDriveMediaReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.finish_upload_drive_media = origin_func

    def test_mock_self_func_create_drive_member_permission_old(self):
        origin_func = self.module_cli.create_drive_member_permission_old
        self.module_cli.create_drive_member_permission_old = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_member_permission_old(
                pylark.CreateDriveMemberPermissionOldReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_drive_member_permission_old = origin_func

    def test_mock_self_func_transfer_drive_member_permission(self):
        origin_func = self.module_cli.transfer_drive_member_permission
        self.module_cli.transfer_drive_member_permission = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.transfer_drive_member_permission(
                pylark.TransferDriveMemberPermissionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.transfer_drive_member_permission = origin_func

    def test_mock_self_func_get_drive_member_permission_list(self):
        origin_func = self.module_cli.get_drive_member_permission_list
        self.module_cli.get_drive_member_permission_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_member_permission_list(
                pylark.GetDriveMemberPermissionListReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_drive_member_permission_list = origin_func

    def test_mock_self_func_create_drive_member_permission(self):
        origin_func = self.module_cli.create_drive_member_permission
        self.module_cli.create_drive_member_permission = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_member_permission(
                pylark.CreateDriveMemberPermissionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_drive_member_permission = origin_func

    def test_mock_self_func_delete_drive_member_permission_old(self):
        origin_func = self.module_cli.delete_drive_member_permission_old
        self.module_cli.delete_drive_member_permission_old = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_member_permission_old(
                pylark.DeleteDriveMemberPermissionOldReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_drive_member_permission_old = origin_func

    def test_mock_self_func_delete_drive_member_permission(self):
        origin_func = self.module_cli.delete_drive_member_permission
        self.module_cli.delete_drive_member_permission = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_member_permission(
                pylark.DeleteDriveMemberPermissionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_drive_member_permission = origin_func

    def test_mock_self_func_update_drive_member_permission_old(self):
        origin_func = self.module_cli.update_drive_member_permission_old
        self.module_cli.update_drive_member_permission_old = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_member_permission_old(
                pylark.UpdateDriveMemberPermissionOldReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_drive_member_permission_old = origin_func

    def test_mock_self_func_update_drive_member_permission(self):
        origin_func = self.module_cli.update_drive_member_permission
        self.module_cli.update_drive_member_permission = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_member_permission(
                pylark.UpdateDriveMemberPermissionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_drive_member_permission = origin_func

    def test_mock_self_func_check_drive_member_permission(self):
        origin_func = self.module_cli.check_drive_member_permission
        self.module_cli.check_drive_member_permission = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.check_drive_member_permission(
                pylark.CheckDriveMemberPermissionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.check_drive_member_permission = origin_func

    def test_mock_self_func_update_drive_public_permission_v1_old(self):
        origin_func = self.module_cli.update_drive_public_permission_v1_old
        self.module_cli.update_drive_public_permission_v1_old = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission_v1_old(
                pylark.UpdateDrivePublicPermissionV1OldReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_drive_public_permission_v1_old = origin_func

    def test_mock_self_func_update_drive_public_permission_v2_old(self):
        origin_func = self.module_cli.update_drive_public_permission_v2_old
        self.module_cli.update_drive_public_permission_v2_old = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission_v2_old(
                pylark.UpdateDrivePublicPermissionV2OldReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_drive_public_permission_v2_old = origin_func

    def test_mock_self_func_get_drive_public_permission_v2(self):
        origin_func = self.module_cli.get_drive_public_permission_v2
        self.module_cli.get_drive_public_permission_v2 = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_public_permission_v2(
                pylark.GetDrivePublicPermissionV2Req()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_drive_public_permission_v2 = origin_func

    def test_mock_self_func_update_drive_public_permission(self):
        origin_func = self.module_cli.update_drive_public_permission
        self.module_cli.update_drive_public_permission = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission(
                pylark.UpdateDrivePublicPermissionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_drive_public_permission = origin_func

    def test_mock_self_func_batch_get_drive_media_tmp_download_url(self):
        origin_func = self.module_cli.batch_get_drive_media_tmp_download_url
        self.module_cli.batch_get_drive_media_tmp_download_url = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_drive_media_tmp_download_url(
                pylark.BatchGetDriveMediaTmpDownloadURLReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_get_drive_media_tmp_download_url = origin_func

    def test_mock_self_func_get_drive_comment_list(self):
        origin_func = self.module_cli.get_drive_comment_list
        self.module_cli.get_drive_comment_list = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_comment_list(pylark.GetDriveCommentListReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_drive_comment_list = origin_func

    def test_mock_self_func_get_drive_comment(self):
        origin_func = self.module_cli.get_drive_comment
        self.module_cli.get_drive_comment = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_comment(pylark.GetDriveCommentReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_drive_comment = origin_func

    def test_mock_self_func_create_drive_comment(self):
        origin_func = self.module_cli.create_drive_comment
        self.module_cli.create_drive_comment = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_comment(pylark.CreateDriveCommentReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_drive_comment = origin_func

    def test_mock_self_func_update_drive_comment(self):
        origin_func = self.module_cli.update_drive_comment
        self.module_cli.update_drive_comment = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_comment(pylark.UpdateDriveCommentReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_drive_comment = origin_func

    def test_mock_self_func_delete_drive_comment(self):
        origin_func = self.module_cli.delete_drive_comment
        self.module_cli.delete_drive_comment = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_comment(pylark.DeleteDriveCommentReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_drive_comment = origin_func

    def test_mock_self_func_update_drive_comment_patch(self):
        origin_func = self.module_cli.update_drive_comment_patch
        self.module_cli.update_drive_comment_patch = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_comment_patch(
                pylark.UpdateDriveCommentPatchReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_drive_comment_patch = origin_func

    def test_mock_self_func_create_drive_doc(self):
        origin_func = self.module_cli.create_drive_doc
        self.module_cli.create_drive_doc = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_doc(pylark.CreateDriveDocReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_drive_doc = origin_func

    def test_mock_self_func_get_drive_doc_content(self):
        origin_func = self.module_cli.get_drive_doc_content
        self.module_cli.get_drive_doc_content = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_content(pylark.GetDriveDocContentReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_drive_doc_content = origin_func

    def test_mock_self_func_get_drive_doc_raw_content(self):
        origin_func = self.module_cli.get_drive_doc_raw_content
        self.module_cli.get_drive_doc_raw_content = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_raw_content(pylark.GetDriveDocRawContentReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_drive_doc_raw_content = origin_func

    def test_mock_self_func_get_drive_doc_meta(self):
        origin_func = self.module_cli.get_drive_doc_meta
        self.module_cli.get_drive_doc_meta = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_meta(pylark.GetDriveDocMetaReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_drive_doc_meta = origin_func

    def test_mock_self_func_create_sheet(self):
        origin_func = self.module_cli.create_sheet
        self.module_cli.create_sheet = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet(pylark.CreateSheetReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_sheet = origin_func

    def test_mock_self_func_get_sheet_meta(self):
        origin_func = self.module_cli.get_sheet_meta
        self.module_cli.get_sheet_meta = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_meta(pylark.GetSheetMetaReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_sheet_meta = origin_func

    def test_mock_self_func_update_sheet_property(self):
        origin_func = self.module_cli.update_sheet_property
        self.module_cli.update_sheet_property = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_property(pylark.UpdateSheetPropertyReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_sheet_property = origin_func

    def test_mock_self_func_batch_update_sheet(self):
        origin_func = self.module_cli.batch_update_sheet
        self.module_cli.batch_update_sheet = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_update_sheet(pylark.BatchUpdateSheetReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_update_sheet = origin_func

    def test_mock_self_func_import_sheet(self):
        origin_func = self.module_cli.import_sheet
        self.module_cli.import_sheet = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.import_sheet(pylark.ImportSheetReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.import_sheet = origin_func

    def test_mock_self_func_create_drive_import_task(self):
        origin_func = self.module_cli.create_drive_import_task
        self.module_cli.create_drive_import_task = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_import_task(pylark.CreateDriveImportTaskReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_drive_import_task = origin_func

    def test_mock_self_func_get_drive_import_task(self):
        origin_func = self.module_cli.get_drive_import_task
        self.module_cli.get_drive_import_task = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_import_task(pylark.GetDriveImportTaskReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_drive_import_task = origin_func

    def test_mock_self_func_move_sheet_dimension(self):
        origin_func = self.module_cli.move_sheet_dimension
        self.module_cli.move_sheet_dimension = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.move_sheet_dimension(pylark.MoveSheetDimensionReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.move_sheet_dimension = origin_func

    def test_mock_self_func_prepend_sheet_value(self):
        origin_func = self.module_cli.prepend_sheet_value
        self.module_cli.prepend_sheet_value = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepend_sheet_value(pylark.PrependSheetValueReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.prepend_sheet_value = origin_func

    def test_mock_self_func_append_sheet_value(self):
        origin_func = self.module_cli.append_sheet_value
        self.module_cli.append_sheet_value = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.append_sheet_value(pylark.AppendSheetValueReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.append_sheet_value = origin_func

    def test_mock_self_func_insert_sheet_dimension_range(self):
        origin_func = self.module_cli.insert_sheet_dimension_range
        self.module_cli.insert_sheet_dimension_range = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.insert_sheet_dimension_range(
                pylark.InsertSheetDimensionRangeReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.insert_sheet_dimension_range = origin_func

    def test_mock_self_func_add_sheet_dimension_range(self):
        origin_func = self.module_cli.add_sheet_dimension_range
        self.module_cli.add_sheet_dimension_range = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.add_sheet_dimension_range(
                pylark.AddSheetDimensionRangeReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.add_sheet_dimension_range = origin_func

    def test_mock_self_func_update_sheet_dimension_range(self):
        origin_func = self.module_cli.update_sheet_dimension_range
        self.module_cli.update_sheet_dimension_range = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_dimension_range(
                pylark.UpdateSheetDimensionRangeReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_sheet_dimension_range = origin_func

    def test_mock_self_func_delete_sheet_dimension_range(self):
        origin_func = self.module_cli.delete_sheet_dimension_range
        self.module_cli.delete_sheet_dimension_range = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_dimension_range(
                pylark.DeleteSheetDimensionRangeReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_sheet_dimension_range = origin_func

    def test_mock_self_func_get_sheet_value(self):
        origin_func = self.module_cli.get_sheet_value
        self.module_cli.get_sheet_value = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_value(pylark.GetSheetValueReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_sheet_value = origin_func

    def test_mock_self_func_batch_get_sheet_value(self):
        origin_func = self.module_cli.batch_get_sheet_value
        self.module_cli.batch_get_sheet_value = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_sheet_value(pylark.BatchGetSheetValueReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_get_sheet_value = origin_func

    def test_mock_self_func_set_sheet_value(self):
        origin_func = self.module_cli.set_sheet_value
        self.module_cli.set_sheet_value = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_value(pylark.SetSheetValueReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.set_sheet_value = origin_func

    def test_mock_self_func_batch_set_sheet_value(self):
        origin_func = self.module_cli.batch_set_sheet_value
        self.module_cli.batch_set_sheet_value = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_set_sheet_value(pylark.BatchSetSheetValueReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_set_sheet_value = origin_func

    def test_mock_self_func_set_sheet_style(self):
        origin_func = self.module_cli.set_sheet_style
        self.module_cli.set_sheet_style = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_style(pylark.SetSheetStyleReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.set_sheet_style = origin_func

    def test_mock_self_func_batch_set_sheet_style(self):
        origin_func = self.module_cli.batch_set_sheet_style
        self.module_cli.batch_set_sheet_style = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_set_sheet_style(pylark.BatchSetSheetStyleReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.batch_set_sheet_style = origin_func

    def test_mock_self_func_merge_sheet_cell(self):
        origin_func = self.module_cli.merge_sheet_cell
        self.module_cli.merge_sheet_cell = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.merge_sheet_cell(pylark.MergeSheetCellReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.merge_sheet_cell = origin_func

    def test_mock_self_func_unmerge_sheet_cell(self):
        origin_func = self.module_cli.unmerge_sheet_cell
        self.module_cli.unmerge_sheet_cell = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.unmerge_sheet_cell(pylark.UnmergeSheetCellReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.unmerge_sheet_cell = origin_func

    def test_mock_self_func_set_sheet_value_image(self):
        origin_func = self.module_cli.set_sheet_value_image
        self.module_cli.set_sheet_value_image = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_value_image(pylark.SetSheetValueImageReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.set_sheet_value_image = origin_func

    def test_mock_self_func_find_sheet(self):
        origin_func = self.module_cli.find_sheet
        self.module_cli.find_sheet = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.find_sheet(pylark.FindSheetReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.find_sheet = origin_func

    def test_mock_self_func_replace_sheet(self):
        origin_func = self.module_cli.replace_sheet
        self.module_cli.replace_sheet = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.replace_sheet(pylark.ReplaceSheetReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.replace_sheet = origin_func

    def test_mock_self_func_create_sheet_condition_format(self):
        origin_func = self.module_cli.create_sheet_condition_format
        self.module_cli.create_sheet_condition_format = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_condition_format(
                pylark.CreateSheetConditionFormatReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_sheet_condition_format = origin_func

    def test_mock_self_func_get_sheet_condition_format(self):
        origin_func = self.module_cli.get_sheet_condition_format
        self.module_cli.get_sheet_condition_format = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_condition_format(
                pylark.GetSheetConditionFormatReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_sheet_condition_format = origin_func

    def test_mock_self_func_update_sheet_condition_format(self):
        origin_func = self.module_cli.update_sheet_condition_format
        self.module_cli.update_sheet_condition_format = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_condition_format(
                pylark.UpdateSheetConditionFormatReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_sheet_condition_format = origin_func

    def test_mock_self_func_delete_sheet_condition_format(self):
        origin_func = self.module_cli.delete_sheet_condition_format
        self.module_cli.delete_sheet_condition_format = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_condition_format(
                pylark.DeleteSheetConditionFormatReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_sheet_condition_format = origin_func

    def test_mock_self_func_create_sheet_protected_dimension(self):
        origin_func = self.module_cli.create_sheet_protected_dimension
        self.module_cli.create_sheet_protected_dimension = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_protected_dimension(
                pylark.CreateSheetProtectedDimensionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_sheet_protected_dimension = origin_func

    def test_mock_self_func_get_sheet_protected_dimension(self):
        origin_func = self.module_cli.get_sheet_protected_dimension
        self.module_cli.get_sheet_protected_dimension = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_protected_dimension(
                pylark.GetSheetProtectedDimensionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_sheet_protected_dimension = origin_func

    def test_mock_self_func_update_sheet_protected_dimension(self):
        origin_func = self.module_cli.update_sheet_protected_dimension
        self.module_cli.update_sheet_protected_dimension = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_protected_dimension(
                pylark.UpdateSheetProtectedDimensionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_sheet_protected_dimension = origin_func

    def test_mock_self_func_delete_sheet_protected_dimension(self):
        origin_func = self.module_cli.delete_sheet_protected_dimension
        self.module_cli.delete_sheet_protected_dimension = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_protected_dimension(
                pylark.DeleteSheetProtectedDimensionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_sheet_protected_dimension = origin_func

    def test_mock_self_func_create_sheet_data_validation_dropdown(self):
        origin_func = self.module_cli.create_sheet_data_validation_dropdown
        self.module_cli.create_sheet_data_validation_dropdown = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_data_validation_dropdown(
                pylark.CreateSheetDataValidationDropdownReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_sheet_data_validation_dropdown = origin_func

    def test_mock_self_func_delete_sheet_data_validation_dropdown(self):
        origin_func = self.module_cli.delete_sheet_data_validation_dropdown
        self.module_cli.delete_sheet_data_validation_dropdown = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_data_validation_dropdown(
                pylark.DeleteSheetDataValidationDropdownReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_sheet_data_validation_dropdown = origin_func

    def test_mock_self_func_update_sheet_data_validation_dropdown(self):
        origin_func = self.module_cli.update_sheet_data_validation_dropdown
        self.module_cli.update_sheet_data_validation_dropdown = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_data_validation_dropdown(
                pylark.UpdateSheetDataValidationDropdownReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_sheet_data_validation_dropdown = origin_func

    def test_mock_self_func_get_sheet_data_validation_dropdown(self):
        origin_func = self.module_cli.get_sheet_data_validation_dropdown
        self.module_cli.get_sheet_data_validation_dropdown = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_data_validation_dropdown(
                pylark.GetSheetDataValidationDropdownReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_sheet_data_validation_dropdown = origin_func

    def test_mock_self_func_create_sheet_filter(self):
        origin_func = self.module_cli.create_sheet_filter
        self.module_cli.create_sheet_filter = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter(pylark.CreateSheetFilterReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_sheet_filter = origin_func

    def test_mock_self_func_delete_sheet_filter(self):
        origin_func = self.module_cli.delete_sheet_filter
        self.module_cli.delete_sheet_filter = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter(pylark.DeleteSheetFilterReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_sheet_filter = origin_func

    def test_mock_self_func_update_sheet_filter(self):
        origin_func = self.module_cli.update_sheet_filter
        self.module_cli.update_sheet_filter = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter(pylark.UpdateSheetFilterReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_sheet_filter = origin_func

    def test_mock_self_func_get_sheet_filter(self):
        origin_func = self.module_cli.get_sheet_filter
        self.module_cli.get_sheet_filter = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter(pylark.GetSheetFilterReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_sheet_filter = origin_func

    def test_mock_self_func_create_sheet_filter_view(self):
        origin_func = self.module_cli.create_sheet_filter_view
        self.module_cli.create_sheet_filter_view = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter_view(pylark.CreateSheetFilterViewReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_sheet_filter_view = origin_func

    def test_mock_self_func_delete_sheet_filter_view(self):
        origin_func = self.module_cli.delete_sheet_filter_view
        self.module_cli.delete_sheet_filter_view = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter_view(pylark.DeleteSheetFilterViewReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_sheet_filter_view = origin_func

    def test_mock_self_func_update_sheet_filter_view(self):
        origin_func = self.module_cli.update_sheet_filter_view
        self.module_cli.update_sheet_filter_view = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter_view(pylark.UpdateSheetFilterViewReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_sheet_filter_view = origin_func

    def test_mock_self_func_get_sheet_filter_view(self):
        origin_func = self.module_cli.get_sheet_filter_view
        self.module_cli.get_sheet_filter_view = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter_view(pylark.GetSheetFilterViewReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_sheet_filter_view = origin_func

    def test_mock_self_func_query_sheet_filter_view(self):
        origin_func = self.module_cli.query_sheet_filter_view
        self.module_cli.query_sheet_filter_view = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_filter_view(pylark.QuerySheetFilterViewReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.query_sheet_filter_view = origin_func

    def test_mock_self_func_create_sheet_filter_view_condition(self):
        origin_func = self.module_cli.create_sheet_filter_view_condition
        self.module_cli.create_sheet_filter_view_condition = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter_view_condition(
                pylark.CreateSheetFilterViewConditionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_sheet_filter_view_condition = origin_func

    def test_mock_self_func_delete_sheet_filter_view_condition(self):
        origin_func = self.module_cli.delete_sheet_filter_view_condition
        self.module_cli.delete_sheet_filter_view_condition = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter_view_condition(
                pylark.DeleteSheetFilterViewConditionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_sheet_filter_view_condition = origin_func

    def test_mock_self_func_update_sheet_filter_view_condition(self):
        origin_func = self.module_cli.update_sheet_filter_view_condition
        self.module_cli.update_sheet_filter_view_condition = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter_view_condition(
                pylark.UpdateSheetFilterViewConditionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_sheet_filter_view_condition = origin_func

    def test_mock_self_func_get_sheet_filter_view_condition(self):
        origin_func = self.module_cli.get_sheet_filter_view_condition
        self.module_cli.get_sheet_filter_view_condition = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter_view_condition(
                pylark.GetSheetFilterViewConditionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_sheet_filter_view_condition = origin_func

    def test_mock_self_func_query_sheet_filter_view_condition(self):
        origin_func = self.module_cli.query_sheet_filter_view_condition
        self.module_cli.query_sheet_filter_view_condition = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_filter_view_condition(
                pylark.QuerySheetFilterViewConditionReq()
            )

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.query_sheet_filter_view_condition = origin_func

    def test_mock_self_func_create_sheet_float_image(self):
        origin_func = self.module_cli.create_sheet_float_image
        self.module_cli.create_sheet_float_image = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_float_image(pylark.CreateSheetFloatImageReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.create_sheet_float_image = origin_func

    def test_mock_self_func_delete_sheet_float_image(self):
        origin_func = self.module_cli.delete_sheet_float_image
        self.module_cli.delete_sheet_float_image = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_float_image(pylark.DeleteSheetFloatImageReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.delete_sheet_float_image = origin_func

    def test_mock_self_func_update_sheet_float_image(self):
        origin_func = self.module_cli.update_sheet_float_image
        self.module_cli.update_sheet_float_image = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_float_image(pylark.UpdateSheetFloatImageReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.update_sheet_float_image = origin_func

    def test_mock_self_func_get_sheet_float_image(self):
        origin_func = self.module_cli.get_sheet_float_image
        self.module_cli.get_sheet_float_image = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_float_image(pylark.GetSheetFloatImageReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.get_sheet_float_image = origin_func

    def test_mock_self_func_query_sheet_float_image(self):
        origin_func = self.module_cli.query_sheet_float_image
        self.module_cli.query_sheet_float_image = mock

        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_float_image(pylark.QuerySheetFloatImageReq())

        assert "msg=mock-failed" in f"{e}"
        self.module_cli.query_sheet_float_image = origin_func


# mock raw request
class TestDriveSampleMockRawRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestDriveSampleMockRawRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.module_cli = self.cli.drive
        self.cli.raw_request = mock_raw_request

    def test_mock_raw_request_get_drive_file_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_file_meta(pylark.GetDriveFileMetaReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_file(
                pylark.CreateDriveFileReq(
                    folder_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_copy_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.copy_drive_file(
                pylark.CopyDriveFileReq(
                    file_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_file(
                pylark.DeleteDriveFileReq(
                    doc_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_drive_sheet_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_sheet_file(
                pylark.DeleteDriveSheetFileReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_drive_folder(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_folder(
                pylark.CreateDriveFolderReq(
                    folder_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_drive_folder_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_folder_meta(
                pylark.GetDriveFolderMetaReq(
                    folder_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_drive_root_folder_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_root_folder_meta(
                pylark.GetDriveRootFolderMetaReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_drive_folder_children(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_folder_children(
                pylark.GetDriveFolderChildrenReq(
                    folder_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_drive_file_statistics(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_file_statistics(
                pylark.GetDriveFileStatisticsReq(
                    file_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_download_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_drive_file(
                pylark.DownloadDriveFileReq(
                    file_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_drive_file(pylark.UploadDriveFileReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_prepare_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepare_upload_drive_file(
                pylark.PrepareUploadDriveFileReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_part_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.part_upload_drive_file(pylark.PartUploadDriveFileReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_finish_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.finish_upload_drive_file(pylark.FinishUploadDriveFileReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_download_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_drive_media(
                pylark.DownloadDriveMediaReq(
                    file_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_drive_media(pylark.UploadDriveMediaReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_prepare_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepare_upload_drive_media(
                pylark.PrepareUploadDriveMediaReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_part_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.part_upload_drive_media(pylark.PartUploadDriveMediaReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_finish_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.finish_upload_drive_media(
                pylark.FinishUploadDriveMediaReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_drive_member_permission_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_member_permission_old(
                pylark.CreateDriveMemberPermissionOldReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_transfer_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.transfer_drive_member_permission(
                pylark.TransferDriveMemberPermissionReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_drive_member_permission_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_member_permission_list(
                pylark.GetDriveMemberPermissionListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_member_permission(
                pylark.CreateDriveMemberPermissionReq(
                    token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_drive_member_permission_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_member_permission_old(
                pylark.DeleteDriveMemberPermissionOldReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_member_permission(
                pylark.DeleteDriveMemberPermissionReq(
                    token="x",
                    member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_drive_member_permission_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_member_permission_old(
                pylark.UpdateDriveMemberPermissionOldReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_member_permission(
                pylark.UpdateDriveMemberPermissionReq(
                    token="x",
                    member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_check_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.check_drive_member_permission(
                pylark.CheckDriveMemberPermissionReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_drive_public_permission_v1_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission_v1_old(
                pylark.UpdateDrivePublicPermissionV1OldReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_drive_public_permission_v2_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission_v2_old(
                pylark.UpdateDrivePublicPermissionV2OldReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_drive_public_permission_v2(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_public_permission_v2(
                pylark.GetDrivePublicPermissionV2Req()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_drive_public_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission(
                pylark.UpdateDrivePublicPermissionReq(
                    token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_get_drive_media_tmp_download_url(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_drive_media_tmp_download_url(
                pylark.BatchGetDriveMediaTmpDownloadURLReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_drive_comment_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_comment_list(
                pylark.GetDriveCommentListReq(
                    file_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_comment(
                pylark.GetDriveCommentReq(
                    file_token="x",
                    comment_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_comment(
                pylark.CreateDriveCommentReq(
                    file_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_comment(
                pylark.UpdateDriveCommentReq(
                    file_token="x",
                    comment_id="x",
                    reply_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_comment(
                pylark.DeleteDriveCommentReq(
                    file_token="x",
                    comment_id="x",
                    reply_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_drive_comment_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_comment_patch(
                pylark.UpdateDriveCommentPatchReq(
                    file_token="x",
                    comment_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_drive_doc(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_doc(pylark.CreateDriveDocReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_drive_doc_content(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_content(
                pylark.GetDriveDocContentReq(
                    doc_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_drive_doc_raw_content(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_raw_content(
                pylark.GetDriveDocRawContentReq(
                    doc_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_drive_doc_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_meta(
                pylark.GetDriveDocMetaReq(
                    doc_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet(pylark.CreateSheetReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_sheet_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_meta(
                pylark.GetSheetMetaReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_sheet_property(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_property(
                pylark.UpdateSheetPropertyReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_update_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_update_sheet(
                pylark.BatchUpdateSheetReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_import_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.import_sheet(pylark.ImportSheetReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_drive_import_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_import_task(pylark.CreateDriveImportTaskReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_drive_import_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_import_task(
                pylark.GetDriveImportTaskReq(
                    ticket="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_move_sheet_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.move_sheet_dimension(
                pylark.MoveSheetDimensionReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_prepend_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepend_sheet_value(
                pylark.PrependSheetValueReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_append_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.append_sheet_value(
                pylark.AppendSheetValueReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_insert_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.insert_sheet_dimension_range(
                pylark.InsertSheetDimensionRangeReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_add_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.add_sheet_dimension_range(
                pylark.AddSheetDimensionRangeReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_dimension_range(
                pylark.UpdateSheetDimensionRangeReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_dimension_range(
                pylark.DeleteSheetDimensionRangeReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_value(
                pylark.GetSheetValueReq(
                    spreadsheet_token="x",
                    range_="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_get_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_sheet_value(
                pylark.BatchGetSheetValueReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_set_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_value(
                pylark.SetSheetValueReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_set_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_set_sheet_value(
                pylark.BatchSetSheetValueReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_set_sheet_style(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_style(
                pylark.SetSheetStyleReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_batch_set_sheet_style(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_set_sheet_style(
                pylark.BatchSetSheetStyleReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_merge_sheet_cell(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.merge_sheet_cell(
                pylark.MergeSheetCellReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_unmerge_sheet_cell(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.unmerge_sheet_cell(
                pylark.UnmergeSheetCellReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_set_sheet_value_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_value_image(
                pylark.SetSheetValueImageReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_find_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.find_sheet(
                pylark.FindSheetReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_replace_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.replace_sheet(
                pylark.ReplaceSheetReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_condition_format(
                pylark.CreateSheetConditionFormatReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_condition_format(
                pylark.GetSheetConditionFormatReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_condition_format(
                pylark.UpdateSheetConditionFormatReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_condition_format(
                pylark.DeleteSheetConditionFormatReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_protected_dimension(
                pylark.CreateSheetProtectedDimensionReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_protected_dimension(
                pylark.GetSheetProtectedDimensionReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_protected_dimension(
                pylark.UpdateSheetProtectedDimensionReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_protected_dimension(
                pylark.DeleteSheetProtectedDimensionReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_data_validation_dropdown(
                pylark.CreateSheetDataValidationDropdownReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_data_validation_dropdown(
                pylark.DeleteSheetDataValidationDropdownReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_data_validation_dropdown(
                pylark.UpdateSheetDataValidationDropdownReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    data_validation_id=1,
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_data_validation_dropdown(
                pylark.GetSheetDataValidationDropdownReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter(
                pylark.CreateSheetFilterReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter(
                pylark.DeleteSheetFilterReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter(
                pylark.UpdateSheetFilterReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter(
                pylark.GetSheetFilterReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter_view(
                pylark.CreateSheetFilterViewReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter_view(
                pylark.DeleteSheetFilterViewReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter_view(
                pylark.UpdateSheetFilterViewReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter_view(
                pylark.GetSheetFilterViewReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_query_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_filter_view(
                pylark.QuerySheetFilterViewReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter_view_condition(
                pylark.CreateSheetFilterViewConditionReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter_view_condition(
                pylark.DeleteSheetFilterViewConditionReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                    condition_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter_view_condition(
                pylark.UpdateSheetFilterViewConditionReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                    condition_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter_view_condition(
                pylark.GetSheetFilterViewConditionReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                    condition_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_query_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_filter_view_condition(
                pylark.QuerySheetFilterViewConditionReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_create_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_float_image(
                pylark.CreateSheetFloatImageReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_delete_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_float_image(
                pylark.DeleteSheetFloatImageReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    float_image_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_update_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_float_image(
                pylark.UpdateSheetFloatImageReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    float_image_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_get_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_float_image(
                pylark.GetSheetFloatImageReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    float_image_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg

    def test_mock_raw_request_query_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_float_image(
                pylark.QuerySheetFloatImageReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
        assert "mock-raw-request-failed" in e.value.msg


# real request
class TestDriveSampleRealRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestDriveSampleRealRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_no_permission.ins()
        self.module_cli = self.cli.drive

    def test_real_request_get_drive_file_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_file_meta(pylark.GetDriveFileMetaReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_file(
                pylark.CreateDriveFileReq(
                    folder_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_copy_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.copy_drive_file(
                pylark.CopyDriveFileReq(
                    file_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_file(
                pylark.DeleteDriveFileReq(
                    doc_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_drive_sheet_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_sheet_file(
                pylark.DeleteDriveSheetFileReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_drive_folder(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_folder(
                pylark.CreateDriveFolderReq(
                    folder_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_drive_folder_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_folder_meta(
                pylark.GetDriveFolderMetaReq(
                    folder_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_drive_root_folder_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_root_folder_meta(
                pylark.GetDriveRootFolderMetaReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_drive_folder_children(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_folder_children(
                pylark.GetDriveFolderChildrenReq(
                    folder_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_drive_file_statistics(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_file_statistics(
                pylark.GetDriveFileStatisticsReq(
                    file_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_download_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_drive_file(
                pylark.DownloadDriveFileReq(
                    file_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_drive_file(pylark.UploadDriveFileReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_prepare_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepare_upload_drive_file(
                pylark.PrepareUploadDriveFileReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_part_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.part_upload_drive_file(pylark.PartUploadDriveFileReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_finish_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.finish_upload_drive_file(pylark.FinishUploadDriveFileReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_download_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_drive_media(
                pylark.DownloadDriveMediaReq(
                    file_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_drive_media(pylark.UploadDriveMediaReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_prepare_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepare_upload_drive_media(
                pylark.PrepareUploadDriveMediaReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_part_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.part_upload_drive_media(pylark.PartUploadDriveMediaReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_finish_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.finish_upload_drive_media(
                pylark.FinishUploadDriveMediaReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_drive_member_permission_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_member_permission_old(
                pylark.CreateDriveMemberPermissionOldReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_transfer_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.transfer_drive_member_permission(
                pylark.TransferDriveMemberPermissionReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_drive_member_permission_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_member_permission_list(
                pylark.GetDriveMemberPermissionListReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_member_permission(
                pylark.CreateDriveMemberPermissionReq(
                    token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_drive_member_permission_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_member_permission_old(
                pylark.DeleteDriveMemberPermissionOldReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_member_permission(
                pylark.DeleteDriveMemberPermissionReq(
                    token="x",
                    member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_drive_member_permission_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_member_permission_old(
                pylark.UpdateDriveMemberPermissionOldReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_member_permission(
                pylark.UpdateDriveMemberPermissionReq(
                    token="x",
                    member_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_check_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.check_drive_member_permission(
                pylark.CheckDriveMemberPermissionReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_drive_public_permission_v1_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission_v1_old(
                pylark.UpdateDrivePublicPermissionV1OldReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_drive_public_permission_v2_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission_v2_old(
                pylark.UpdateDrivePublicPermissionV2OldReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_drive_public_permission_v2(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_public_permission_v2(
                pylark.GetDrivePublicPermissionV2Req()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_drive_public_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission(
                pylark.UpdateDrivePublicPermissionReq(
                    token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_get_drive_media_tmp_download_url(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_drive_media_tmp_download_url(
                pylark.BatchGetDriveMediaTmpDownloadURLReq()
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_drive_comment_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_comment_list(
                pylark.GetDriveCommentListReq(
                    file_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_comment(
                pylark.GetDriveCommentReq(
                    file_token="x",
                    comment_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_comment(
                pylark.CreateDriveCommentReq(
                    file_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_comment(
                pylark.UpdateDriveCommentReq(
                    file_token="x",
                    comment_id="x",
                    reply_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_comment(
                pylark.DeleteDriveCommentReq(
                    file_token="x",
                    comment_id="x",
                    reply_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_drive_comment_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_comment_patch(
                pylark.UpdateDriveCommentPatchReq(
                    file_token="x",
                    comment_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_drive_doc(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_doc(pylark.CreateDriveDocReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_drive_doc_content(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_content(
                pylark.GetDriveDocContentReq(
                    doc_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_drive_doc_raw_content(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_raw_content(
                pylark.GetDriveDocRawContentReq(
                    doc_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_drive_doc_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_meta(
                pylark.GetDriveDocMetaReq(
                    doc_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet(pylark.CreateSheetReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_sheet_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_meta(
                pylark.GetSheetMetaReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_sheet_property(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_property(
                pylark.UpdateSheetPropertyReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_update_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_update_sheet(
                pylark.BatchUpdateSheetReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_import_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.import_sheet(pylark.ImportSheetReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_drive_import_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_import_task(pylark.CreateDriveImportTaskReq())

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_drive_import_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_import_task(
                pylark.GetDriveImportTaskReq(
                    ticket="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_move_sheet_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.move_sheet_dimension(
                pylark.MoveSheetDimensionReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_prepend_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepend_sheet_value(
                pylark.PrependSheetValueReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_append_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.append_sheet_value(
                pylark.AppendSheetValueReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_insert_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.insert_sheet_dimension_range(
                pylark.InsertSheetDimensionRangeReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_add_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.add_sheet_dimension_range(
                pylark.AddSheetDimensionRangeReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_dimension_range(
                pylark.UpdateSheetDimensionRangeReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_dimension_range(
                pylark.DeleteSheetDimensionRangeReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_value(
                pylark.GetSheetValueReq(
                    spreadsheet_token="x",
                    range_="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_get_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_sheet_value(
                pylark.BatchGetSheetValueReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_set_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_value(
                pylark.SetSheetValueReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_set_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_set_sheet_value(
                pylark.BatchSetSheetValueReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_set_sheet_style(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_style(
                pylark.SetSheetStyleReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_batch_set_sheet_style(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_set_sheet_style(
                pylark.BatchSetSheetStyleReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_merge_sheet_cell(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.merge_sheet_cell(
                pylark.MergeSheetCellReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_unmerge_sheet_cell(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.unmerge_sheet_cell(
                pylark.UnmergeSheetCellReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_set_sheet_value_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_value_image(
                pylark.SetSheetValueImageReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_find_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.find_sheet(
                pylark.FindSheetReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_replace_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.replace_sheet(
                pylark.ReplaceSheetReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_condition_format(
                pylark.CreateSheetConditionFormatReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_condition_format(
                pylark.GetSheetConditionFormatReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_condition_format(
                pylark.UpdateSheetConditionFormatReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_condition_format(
                pylark.DeleteSheetConditionFormatReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_protected_dimension(
                pylark.CreateSheetProtectedDimensionReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_protected_dimension(
                pylark.GetSheetProtectedDimensionReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_protected_dimension(
                pylark.UpdateSheetProtectedDimensionReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_protected_dimension(
                pylark.DeleteSheetProtectedDimensionReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_data_validation_dropdown(
                pylark.CreateSheetDataValidationDropdownReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_data_validation_dropdown(
                pylark.DeleteSheetDataValidationDropdownReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_data_validation_dropdown(
                pylark.UpdateSheetDataValidationDropdownReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    data_validation_id=1,
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_data_validation_dropdown(
                pylark.GetSheetDataValidationDropdownReq(
                    spreadsheet_token="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter(
                pylark.CreateSheetFilterReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter(
                pylark.DeleteSheetFilterReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter(
                pylark.UpdateSheetFilterReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter(
                pylark.GetSheetFilterReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter_view(
                pylark.CreateSheetFilterViewReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter_view(
                pylark.DeleteSheetFilterViewReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter_view(
                pylark.UpdateSheetFilterViewReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter_view(
                pylark.GetSheetFilterViewReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_query_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_filter_view(
                pylark.QuerySheetFilterViewReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter_view_condition(
                pylark.CreateSheetFilterViewConditionReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter_view_condition(
                pylark.DeleteSheetFilterViewConditionReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                    condition_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter_view_condition(
                pylark.UpdateSheetFilterViewConditionReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                    condition_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter_view_condition(
                pylark.GetSheetFilterViewConditionReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                    condition_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_query_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_filter_view_condition(
                pylark.QuerySheetFilterViewConditionReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    filter_view_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_create_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_float_image(
                pylark.CreateSheetFloatImageReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_delete_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_float_image(
                pylark.DeleteSheetFloatImageReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    float_image_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_update_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_float_image(
                pylark.UpdateSheetFloatImageReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    float_image_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_get_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_float_image(
                pylark.GetSheetFloatImageReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                    float_image_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0

    def test_real_request_query_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_float_image(
                pylark.QuerySheetFloatImageReq(
                    spreadsheet_token="x",
                    sheet_id="x",
                )
            )

        assert e.type is pylark.PyLarkError
        assert e.value.code > 0
