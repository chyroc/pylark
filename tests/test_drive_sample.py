# Code generated by lark_sdk_gen. DO NOT EDIT.

from tests.test_conf import app_all_permission
import unittest
import pylark
import pytest
from tests.test_helper import mock_get_tenant_access_token_failed


class TestDriveSampleRequestFailed(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestDriveSampleRequestFailed, self).__init__(*args, **kwargs)
        self.cli = app_all_permission.ins()
        self.cli.auth.get_tenant_access_token = mock_get_tenant_access_token_failed
        self.cli.auth.get_app_access_token = mock_get_tenant_access_token_failed
        self.module_cli = self.cli.drive

    def test_request_failed_create_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_file(pylark.CreateDriveFileReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_copy_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.copy_drive_file(pylark.CopyDriveFileReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_file(pylark.DeleteDriveFileReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_drive_sheet_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_sheet_file(pylark.DeleteDriveSheetFileReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_drive_folder(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_folder(pylark.CreateDriveFolderReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_drive_folder_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_folder_meta(pylark.GetDriveFolderMetaReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_drive_root_folder_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_root_folder_meta(
                pylark.GetDriveRootFolderMetaReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_drive_folder_children(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_folder_children(
                pylark.GetDriveFolderChildrenReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_drive_file_statistics(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_file_statistics(
                pylark.GetDriveFileStatisticsReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_download_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_drive_file(pylark.DownloadDriveFileReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_drive_file(pylark.UploadDriveFileReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_prepare_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepare_upload_drive_file(
                pylark.PrepareUploadDriveFileReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_part_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.part_upload_drive_file(pylark.PartUploadDriveFileReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_finish_upload_drive_file(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.finish_upload_drive_file(pylark.FinishUploadDriveFileReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_download_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.download_drive_media(pylark.DownloadDriveMediaReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.upload_drive_media(pylark.UploadDriveMediaReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_prepare_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepare_upload_drive_media(
                pylark.PrepareUploadDriveMediaReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_part_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.part_upload_drive_media(pylark.PartUploadDriveMediaReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_finish_upload_drive_media(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.finish_upload_drive_media(
                pylark.FinishUploadDriveMediaReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_drive_member_permission_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_member_permission_old(
                pylark.CreateDriveMemberPermissionOldReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_transfer_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.transfer_drive_member_permission(
                pylark.TransferDriveMemberPermissionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_drive_member_permission_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_member_permission_list(
                pylark.GetDriveMemberPermissionListReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_member_permission(
                pylark.CreateDriveMemberPermissionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_member_permission(
                pylark.DeleteDriveMemberPermissionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_member_permission(
                pylark.UpdateDriveMemberPermissionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_check_drive_member_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.check_drive_member_permission(
                pylark.CheckDriveMemberPermissionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_drive_public_permission_v1_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission_v1_old(
                pylark.UpdateDrivePublicPermissionV1OldReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_drive_public_permission_v2_old(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission_v2_old(
                pylark.UpdateDrivePublicPermissionV2OldReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_drive_public_permission_v2(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_public_permission_v2(
                pylark.GetDrivePublicPermissionV2Req()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_drive_public_permission(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_public_permission(
                pylark.UpdateDrivePublicPermissionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_get_drive_media_tmp_download_url(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_drive_media_tmp_download_url(
                pylark.BatchGetDriveMediaTmpDownloadURLReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_drive_comment_list(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_comment_list(pylark.GetDriveCommentListReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_comment(pylark.GetDriveCommentReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_comment(pylark.CreateDriveCommentReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_comment(pylark.UpdateDriveCommentReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_drive_comment(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_drive_comment(pylark.DeleteDriveCommentReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_drive_comment_patch(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_drive_comment_patch(
                pylark.UpdateDriveCommentPatchReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_drive_doc(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_doc(pylark.CreateDriveDocReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_drive_doc_content(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_content(pylark.GetDriveDocContentReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_drive_doc_raw_content(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_raw_content(pylark.GetDriveDocRawContentReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_drive_doc_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_doc_meta(pylark.GetDriveDocMetaReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet(pylark.CreateSheetReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_sheet_meta(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_meta(pylark.GetSheetMetaReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_sheet_property(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_property(pylark.UpdateSheetPropertyReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_update_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_update_sheet(pylark.BatchUpdateSheetReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_import_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.import_sheet(pylark.ImportSheetReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_drive_import_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_drive_import_task(pylark.CreateDriveImportTaskReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_drive_import_task(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_drive_import_task(pylark.GetDriveImportTaskReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_move_sheet_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.move_sheet_dimension(pylark.MoveSheetDimensionReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_prepend_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.prepend_sheet_value(pylark.PrependSheetValueReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_append_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.append_sheet_value(pylark.AppendSheetValueReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_insert_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.insert_sheet_dimension_range(
                pylark.InsertSheetDimensionRangeReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_add_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.add_sheet_dimension_range(
                pylark.AddSheetDimensionRangeReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_dimension_range(
                pylark.UpdateSheetDimensionRangeReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_sheet_dimension_range(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_dimension_range(
                pylark.DeleteSheetDimensionRangeReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_value(pylark.GetSheetValueReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_get_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_get_sheet_value(pylark.BatchGetSheetValueReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_set_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_value(pylark.SetSheetValueReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_set_sheet_value(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_set_sheet_value(pylark.BatchSetSheetValueReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_set_sheet_style(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_style(pylark.SetSheetStyleReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_batch_set_sheet_style(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.batch_set_sheet_style(pylark.BatchSetSheetStyleReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_merge_sheet_cell(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.merge_sheet_cell(pylark.MergeSheetCellReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_unmerge_sheet_cell(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.unmerge_sheet_cell(pylark.UnmergeSheetCellReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_set_sheet_value_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.set_sheet_value_image(pylark.SetSheetValueImageReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_find_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.find_sheet(pylark.FindSheetReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_replace_sheet(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.replace_sheet(pylark.ReplaceSheetReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_condition_format(
                pylark.CreateSheetConditionFormatReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_condition_format(
                pylark.GetSheetConditionFormatReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_condition_format(
                pylark.UpdateSheetConditionFormatReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_sheet_condition_format(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_condition_format(
                pylark.DeleteSheetConditionFormatReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_protected_dimension(
                pylark.CreateSheetProtectedDimensionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_protected_dimension(
                pylark.GetSheetProtectedDimensionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_protected_dimension(
                pylark.UpdateSheetProtectedDimensionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_sheet_protected_dimension(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_protected_dimension(
                pylark.DeleteSheetProtectedDimensionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_data_validation_dropdown(
                pylark.CreateSheetDataValidationDropdownReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_data_validation_dropdown(
                pylark.DeleteSheetDataValidationDropdownReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_data_validation_dropdown(
                pylark.UpdateSheetDataValidationDropdownReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_sheet_data_validation_dropdown(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_data_validation_dropdown(
                pylark.GetSheetDataValidationDropdownReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter(pylark.CreateSheetFilterReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter(pylark.DeleteSheetFilterReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter(pylark.UpdateSheetFilterReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_sheet_filter(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter(pylark.GetSheetFilterReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter_view(pylark.CreateSheetFilterViewReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter_view(pylark.DeleteSheetFilterViewReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter_view(pylark.UpdateSheetFilterViewReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter_view(pylark.GetSheetFilterViewReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_query_sheet_filter_view(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_filter_view(pylark.QuerySheetFilterViewReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_filter_view_condition(
                pylark.CreateSheetFilterViewConditionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_filter_view_condition(
                pylark.DeleteSheetFilterViewConditionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_filter_view_condition(
                pylark.UpdateSheetFilterViewConditionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_filter_view_condition(
                pylark.GetSheetFilterViewConditionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_query_sheet_filter_view_condition(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_filter_view_condition(
                pylark.QuerySheetFilterViewConditionReq()
            )

        assert "msg=failed" in f"{e}"

    def test_request_failed_create_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.create_sheet_float_image(pylark.CreateSheetFloatImageReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_delete_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.delete_sheet_float_image(pylark.DeleteSheetFloatImageReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_update_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.update_sheet_float_image(pylark.UpdateSheetFloatImageReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_get_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.get_sheet_float_image(pylark.GetSheetFloatImageReq())

        assert "msg=failed" in f"{e}"

    def test_request_failed_query_sheet_float_image(self):
        with pytest.raises(pylark.PyLarkError) as e:
            self.module_cli.query_sheet_float_image(pylark.QuerySheetFloatImageReq())

        assert "msg=failed" in f"{e}"
