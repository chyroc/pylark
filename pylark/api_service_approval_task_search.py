# Code generated by lark_sdk_gen. DO NOT EDIT.

from pylark.lark_request import RawRequestReq, _new_method_option
import attr
import typing
import io


@attr.s
class SearchApprovalTaskReq(object):
    user_id: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "user_id"}
    )  # 用户 id
    approval_code: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "approval_code"}
    )  # 审批定义 code
    instance_code: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "instance_code"}
    )  # 审批实例 code
    instance_external_id: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "instance_external_id"}
    )  # 审批实例第三方 id<br>注：和 approval_code 取并集
    group_external_id: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "group_external_id"}
    )  # 审批定义分组第三方 id<br>注：和 instance_code 取并集
    task_title: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "task_title"}
    )  # 审批任务标题（只有第三方审批有）
    task_status: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "task_status"}
    )  # 审批任务状态<br>PENDING:   审批中<br>APPROVED:   通过<br>REJECTED:   拒绝<br>TRANSFERRED:转交<br> DONE:      已完成<br>RM_REPEAT:  去重<br> PROCESSED:  已处理<br>注：若不设置，查询全部状态<br>若不在集合中，报错
    task_start_time_from: int = attr.ib(
        default=0, metadata={"req_type": "json", "key": "task_start_time_from"}
    )  # 任务查询开始时间 (unix毫秒时间戳)
    task_start_time_to: int = attr.ib(
        default=0, metadata={"req_type": "json", "key": "task_start_time_to"}
    )  # 任务查询结束时间 (unix毫秒时间戳)
    locale: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "locale"}
    )  # 地区（zh-CN、en-US、ja-JP）
    offset: int = attr.ib(
        default=0, metadata={"req_type": "json", "key": "offset"}
    )  # 查询偏移量<br>注：不得超过10000
    limit: int = attr.ib(
        default=0, metadata={"req_type": "json", "key": "limit"}
    )  # 查询限制量<br>注：不得超过200<br>不设置默认查询10条数据


@attr.s
class SearchApprovalTaskRespTaskTaskLink(object):
    pc_link: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "pc_link"}
    )  # 审批任务 pc 端链接
    mobile_link: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "mobile_link"}
    )  # 审批任务移动端链接


@attr.s
class SearchApprovalTaskRespTaskTask(object):
    start_time: int = attr.ib(
        default=0, metadata={"req_type": "json", "key": "start_time"}
    )  # 审批任务开始时间
    user_id: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "user_id"}
    )  # 审批任务发起人 id
    end_time: int = attr.ib(
        default=0, metadata={"req_type": "json", "key": "end_time"}
    )  # 审批任务结束时间
    title: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "title"}
    )  # 审批任务名称
    status: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "status"}
    )  # 审批任务状态
    extra: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "extra"}
    )  # 审批任务扩展字段
    link: SearchApprovalTaskRespTaskTaskLink = attr.ib(
        default=None, metadata={"req_type": "json", "key": "link"}
    )  # 审批任务链接


@attr.s
class SearchApprovalTaskRespTaskInstanceLink(object):
    pc_link: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "pc_link"}
    )  # 审批实例 pc 端链接
    mobile_link: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "mobile_link"}
    )  # 审批实例移动端链接


@attr.s
class SearchApprovalTaskRespTaskInstance(object):
    code: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "code"}
    )  # 审批实例 code
    external_id: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "external_id"}
    )  # 审批实例外部 id
    user_id: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "user_id"}
    )  # 审批实例发起人 id
    start_time: int = attr.ib(
        default=0, metadata={"req_type": "json", "key": "start_time"}
    )  # 审批实例开始时间
    end_time: int = attr.ib(
        default=0, metadata={"req_type": "json", "key": "end_time"}
    )  # 审批实例结束时间
    status: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "status"}
    )  # 审批实例状态
    title: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "title"}
    )  # 审批实例名称（只有第三方审批有）
    extra: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "extra"}
    )  # 审批实例扩展字段
    serial_id: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "serial_id"}
    )  # 审批流水号
    link: SearchApprovalTaskRespTaskInstanceLink = attr.ib(
        default=None, metadata={"req_type": "json", "key": "link"}
    )  # 审批实例链接（只有第三方审批有）


@attr.s
class SearchApprovalTaskRespTaskGroup(object):
    external_id: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "external_id"}
    )  # 审批定义分组外部 id
    name: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "name"}
    )  # 审批定义分组名称


@attr.s
class SearchApprovalTaskRespTaskApprovalExternal(object):
    batch_cc_read: bool = attr.ib(
        factory=lambda: bool(), metadata={"req_type": "json", "key": "batch_cc_read"}
    )  # 是否支持批量读


@attr.s
class SearchApprovalTaskRespTaskApproval(object):
    code: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "code"}
    )  # 审批定义 code
    name: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "name"}
    )  # 审批定义名称
    is_external: bool = attr.ib(
        factory=lambda: bool(), metadata={"req_type": "json", "key": "is_external"}
    )  # 是否为第三方审批
    external: SearchApprovalTaskRespTaskApprovalExternal = attr.ib(
        default=None, metadata={"req_type": "json", "key": "external"}
    )  # 第三方审批信息


@attr.s
class SearchApprovalTaskRespTask(object):
    approval: SearchApprovalTaskRespTaskApproval = attr.ib(
        default=None, metadata={"req_type": "json", "key": "approval"}
    )  # 审批定义
    group: SearchApprovalTaskRespTaskGroup = attr.ib(
        default=None, metadata={"req_type": "json", "key": "group"}
    )  # 审批定义分组
    instance: SearchApprovalTaskRespTaskInstance = attr.ib(
        default=None, metadata={"req_type": "json", "key": "instance"}
    )  # 审批实例信息
    task: SearchApprovalTaskRespTaskTask = attr.ib(
        default=None, metadata={"req_type": "json", "key": "task"}
    )  # 审批任务


@attr.s
class SearchApprovalTaskResp(object):
    count: int = attr.ib(
        default=0, metadata={"req_type": "json", "key": "count"}
    )  # 查询返回条数
    task_list: typing.List[SearchApprovalTaskRespTask] = attr.ib(
        factory=lambda: [], metadata={"req_type": "json", "key": "task_list"}
    )  # 审批任务列表


def _gen_search_approval_task_req(request, options) -> RawRequestReq:
    return RawRequestReq(
        dataclass=SearchApprovalTaskResp,
        scope="Approval",
        api="SearchApprovalTask",
        method="POST",
        url="https://www.feishu.cn/approval/openapi/v2/task/search",
        body=request,
        method_option=_new_method_option(options),
        need_tenant_access_token=True,
    )
