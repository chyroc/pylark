# Code generated by lark_sdk_gen. DO NOT EDIT.

from pylark.lark_request import RawRequestReq, _new_method_option
import attr
import typing
import io


@attr.s
class GetMailGroupPermissionMemberListReqDepartmentIDType(object):
    pass


@attr.s
class GetMailGroupPermissionMemberListReqUserIDType(object):
    pass


@attr.s
class GetMailGroupPermissionMemberListReq(object):
    user_id_type: GetMailGroupPermissionMemberListReqUserIDType = attr.ib(
        default=None, metadata={"req_type": "query", "key": "user_id_type"}
    )  # 用户 ID 类型, 示例值："open_id", 可选值有: `open_id`：用户的 open id, `union_id`：用户的 union id, `user_id`：用户的 user id, 默认值: `open_id`, 当值为 `user_id`, 字段权限要求: 获取用户 user ID
    department_id_type: GetMailGroupPermissionMemberListReqDepartmentIDType = attr.ib(
        default=None, metadata={"req_type": "query", "key": "department_id_type"}
    )  # 此次调用中使用的部门ID的类型, 示例值："open_department_id", 可选值有: `department_id`：以自定义department_id来标识部门, `open_department_id`：以open_department_id来标识部门
    page_token: str = attr.ib(
        default="", metadata={"req_type": "query", "key": "page_token"}
    )  # 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果, 示例值："xxx"
    page_size: int = attr.ib(
        default=0, metadata={"req_type": "query", "key": "page_size"}
    )  # 分页大小, 示例值：10, 最大值：`200`
    mailgroup_id: str = attr.ib(
        default="", metadata={"req_type": "path", "key": "mailgroup_id"}
    )  # 邮件组ID或者邮件组地址, 示例值："xxxxxxxxxxxxxxx 或 test_mail_group@xxx.xx"


@attr.s
class GetMailGroupPermissionMemberListRespItemType(object):
    pass


@attr.s
class GetMailGroupPermissionMemberListRespItem(object):
    permission_member_id: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "permission_member_id"}
    )  # 权限组内成员唯一标识
    user_id: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "user_id"}
    )  # 租户内用户的唯一标识（当成员类型是USER时有值）
    department_id: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "department_id"}
    )  # 租户内部门的唯一标识（当成员类型是DEPARTMENT时有值）
    type: GetMailGroupPermissionMemberListRespItemType = attr.ib(
        factory=lambda: GetMailGroupPermissionMemberListRespItemType(),
        metadata={"req_type": "json", "key": "type"},
    )  # 成员类型, 可选值有: `USER`：内部用户, `DEPARTMENT`：部门


@attr.s
class GetMailGroupPermissionMemberListResp(object):
    has_more: bool = attr.ib(
        factory=lambda: bool(), metadata={"req_type": "json", "key": "has_more"}
    )  # 是否还有更多项
    page_token: str = attr.ib(
        default="", metadata={"req_type": "json", "key": "page_token"}
    )  # 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
    items: typing.List[GetMailGroupPermissionMemberListRespItem] = attr.ib(
        factory=lambda: [], metadata={"req_type": "json", "key": "items"}
    )  # 邮件组权限成员列表


def _gen_get_mail_group_permission_member_list_req(request, options) -> RawRequestReq:
    return RawRequestReq(
        dataclass=GetMailGroupPermissionMemberListResp,
        scope="Mail",
        api="GetMailGroupPermissionMemberList",
        method="GET",
        url="https://open.feishu.cn/open-apis/mail/v1/mailgroups/:mailgroup_id/permission_members",
        body=request,
        method_option=_new_method_option(options),
        need_tenant_access_token=True,
    )
