# Code generated by lark_sdk_gen. DO NOT EDIT.

from pylark.lark_request import RawRequestReq, _new_method_option
import attr
import typing
import io


@attr.s
class GetMessageReq(object):
    message_id: str = attr.ib(
        default="", metadata={"req_type": "path"}
    )  # 待获取消息内容的消息的ID, 示例值："om_dc13264520392913993dd051dba21dcf"


@attr.s
class GetMessageRespItemMentionIDType(object):
    pass


@attr.s
class GetMessageRespItemMention(object):
    key: str = attr.ib(
        default="", metadata={"req_type": "json"}
    )  # 被@的用户或机器人的序号。例如，第3个被@到的成员，值为“@_user_3”
    id: str = attr.ib(default="", metadata={"req_type": "json"})  # 被@的用户或者机器人的open_id
    id_type: GetMessageRespItemMentionIDType = attr.ib(
        factory=lambda: GetMessageRespItemMentionIDType(), metadata={"req_type": "json"}
    )  # 被@的用户或机器人 id 类型，目前仅支持 `open_id` ([什么是 Open ID？](https://open.feishu.cn/document/home/user-identity-introduction/open-id))
    name: str = attr.ib(default="", metadata={"req_type": "json"})  # 被@的用户或机器人的姓名


@attr.s
class GetMessageRespItemBody(object):
    content: str = attr.ib(
        default="", metadata={"req_type": "json"}
    )  # 消息类型 包括：text、post、image、file、audio、media、sticker、interactive、share_chat、share_user等，类型定义请参考：[发送消息content说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json)


@attr.s
class GetMessageRespItemSenderIDType(object):
    pass


@attr.s
class GetMessageRespItemSender(object):
    id: str = attr.ib(default="", metadata={"req_type": "json"})  # 该字段标识发送者的id
    id_type: GetMessageRespItemSenderIDType = attr.ib(
        factory=lambda: GetMessageRespItemSenderIDType(), metadata={"req_type": "json"}
    )  # 该字段标识发送者的id类型
    sender_type: str = attr.ib(default="", metadata={"req_type": "json"})  # 该字段标识发送者的类型


@attr.s
class GetMessageRespItemMsgType(object):
    pass


@attr.s
class GetMessageRespItem(object):
    message_id: str = attr.ib(
        default="", metadata={"req_type": "json"}
    )  # 消息id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
    root_id: str = attr.ib(
        default="", metadata={"req_type": "json"}
    )  # 根消息id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
    parent_id: str = attr.ib(
        default="", metadata={"req_type": "json"}
    )  # 父消息的id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)
    msg_type: GetMessageRespItemMsgType = attr.ib(
        factory=lambda: GetMessageRespItemMsgType(), metadata={"req_type": "json"}
    )  # 消息类型 包括：text、post、image、file、audio、media、sticker、interactive、share_chat、share_user等，类型定义请参考[发送消息content说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/im-v1/message/create_json)
    create_time: str = attr.ib(
        default="", metadata={"req_type": "json"}
    )  # 消息生成的时间戳（毫秒）
    update_time: str = attr.ib(
        default="", metadata={"req_type": "json"}
    )  # 消息更新的时间戳（毫秒）
    deleted: bool = attr.ib(
        factory=lambda: bool(), metadata={"req_type": "json"}
    )  # 消息是否被撤回
    updated: bool = attr.ib(
        factory=lambda: bool(), metadata={"req_type": "json"}
    )  # 消息是否被更新
    chat_id: str = attr.ib(default="", metadata={"req_type": "json"})  # 所属的群
    sender: GetMessageRespItemSender = attr.ib(
        default=None, metadata={"req_type": "json"}
    )  # 发送者，可以是用户或应用
    body: GetMessageRespItemBody = attr.ib(
        default=None, metadata={"req_type": "json"}
    )  # 消息内容
    mentions: typing.List[GetMessageRespItemMention] = attr.ib(
        factory=lambda: [], metadata={"req_type": "json"}
    )  # 被@的用户或机器人的id列表
    upper_message_id: str = attr.ib(
        default="", metadata={"req_type": "json"}
    )  # 合并转发消息中，上一层级的消息id message_id，说明参见：[消息ID说明](https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/intro#ac79c1c2)


@attr.s
class GetMessageResp(object):
    items: typing.List[GetMessageRespItem] = attr.ib(
        factory=lambda: [], metadata={"req_type": "json"}
    )  # -


def _gen_get_message_req(request, options) -> RawRequestReq:
    return RawRequestReq(
        dataclass=GetMessageResp,
        scope="Message",
        api="GetMessage",
        method="GET",
        url="https://open.feishu.cn/open-apis/im/v1/messages/:message_id",
        body=request,
        method_option=_new_method_option(options),
        need_tenant_access_token=True,
    )
