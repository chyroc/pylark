# Code generated by lark_sdk_gen. DO NOT EDIT.

from pylark.lark_request import RawRequestReq, _new_method_option
import attr
import typing
import io


@attr.s
class SearchApprovalCarbonCopyReq(object):
    user_id: str = attr.ib(default="", metadata={"req_type": "json"})  # 用户 id
    approval_code: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批定义 code
    instance_code: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批实例 code
    instance_external_id: str = attr.ib(
        default="", metadata={"req_type": "json"}
    )  # 审批实例第三方 id<br>注：和 approval_code 取并集
    group_external_id: str = attr.ib(
        default="", metadata={"req_type": "json"}
    )  # 审批定义分组第三方 id<br>注：和 instance_code 取并集
    cc_title: str = attr.ib(
        default="", metadata={"req_type": "json"}
    )  # 审批抄送标题（只有第三方审批有）
    read_status: str = attr.ib(
        default="", metadata={"req_type": "json"}
    )  # 审批抄送状态<br>READ:  已读<br>UNREAD: 未读<br>注：若不设置，查询全部状态<br>若不在集合中，报错
    cc_start_time_from: int = attr.ib(
        default=0, metadata={"req_type": "json"}
    )  # 抄送查询开始时间 (unix毫秒时间戳)
    cc_start_time_to: int = attr.ib(
        default=0, metadata={"req_type": "json"}
    )  # 抄送查询结束时间 (unix毫秒时间戳)
    locale: str = attr.ib(
        default="", metadata={"req_type": "json"}
    )  # 地区 （zh-CN、en-US、ja-JP）
    offset: int = attr.ib(
        default=0, metadata={"req_type": "json"}
    )  # 查询偏移量<br>注：不得超过10000
    limit: int = attr.ib(
        default=0, metadata={"req_type": "json"}
    )  # 查询限制量<br>注：不得超过200<br>不设置默认查询10条数据


@attr.s
class SearchApprovalCarbonCopyRespCcLink(object):
    pc_link: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批抄送 pc 端链接
    mobile_link: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批抄送移动端链接


@attr.s
class SearchApprovalCarbonCopyRespCc(object):
    user_id: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批抄送发起人 id
    create_time: int = attr.ib(default=0, metadata={"req_type": "json"})  # 审批抄送开始时间
    read_status: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批抄送状态
    title: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批抄送名称
    extra: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批抄送扩展字段
    link: SearchApprovalCarbonCopyRespCcLink = attr.ib(
        default=None, metadata={"req_type": "json"}
    )  # 审批抄送链接


@attr.s
class SearchApprovalCarbonCopyRespInstanceLink(object):
    pc_link: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批实例 pc 端链接
    mobile_link: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批实例移动端链接


@attr.s
class SearchApprovalCarbonCopyRespInstance(object):
    code: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批实例 code
    external_id: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批实例外部 id
    user_id: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批实例发起人 id
    start_time: int = attr.ib(default=0, metadata={"req_type": "json"})  # 审批实例开始时间
    end_time: int = attr.ib(default=0, metadata={"req_type": "json"})  # 审批实例结束时间
    status: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批实例状态
    title: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批实例名称（只有第三方审批有）
    extra: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批实例扩展字段
    serial_id: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批流水号
    link: SearchApprovalCarbonCopyRespInstanceLink = attr.ib(
        default=None, metadata={"req_type": "json"}
    )  # 审批实例链接（只有第三方审批有）


@attr.s
class SearchApprovalCarbonCopyRespGroup(object):
    external_id: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批定义分组外部 id
    name: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批定义分组名称


@attr.s
class SearchApprovalCarbonCopyRespApprovalExternal(object):
    batch_cc_read: bool = attr.ib(
        factory=lambda: bool(), metadata={"req_type": "json"}
    )  # 是否支持批量读


@attr.s
class SearchApprovalCarbonCopyRespApproval(object):
    code: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批定义 code
    name: str = attr.ib(default="", metadata={"req_type": "json"})  # 审批定义名称
    is_external: bool = attr.ib(
        factory=lambda: bool(), metadata={"req_type": "json"}
    )  # 是否为第三方审批
    external: SearchApprovalCarbonCopyRespApprovalExternal = attr.ib(
        default=None, metadata={"req_type": "json"}
    )  # 第三方审批信息


@attr.s
class SearchApprovalCarbonCopyResp(object):
    pass


@attr.s
class SearchApprovalCarbonCopyResp(object):
    data: SearchApprovalCarbonCopyResp = attr.ib(
        factory=lambda: SearchApprovalCarbonCopyResp(), metadata={"req_type": "json"}
    )  # 是
    count: int = attr.ib(default=0, metadata={"req_type": "json"})  # 查询返回条数
    cc_list: typing.List[str] = attr.ib(
        factory=lambda: [], metadata={"req_type": "json"}
    )  # 审批实例列表
    approval: SearchApprovalCarbonCopyRespApproval = attr.ib(
        default=None, metadata={"req_type": "json"}
    )  # 审批定义
    group: SearchApprovalCarbonCopyRespGroup = attr.ib(
        default=None, metadata={"req_type": "json"}
    )  # 审批定义分组
    instance: SearchApprovalCarbonCopyRespInstance = attr.ib(
        default=None, metadata={"req_type": "json"}
    )  # 审批实例信息
    cc: SearchApprovalCarbonCopyRespCc = attr.ib(
        default=None, metadata={"req_type": "json"}
    )  # 审批抄送


def _gen_search_approval_carbon_copy_req(request, options) -> RawRequestReq:
    return RawRequestReq(
        dataclass=SearchApprovalCarbonCopyResp,
        scope="Approval",
        api="SearchApprovalCarbonCopy",
        method="POST",
        url="https://www.feishu.cn/approval/openapi/v2/cc/search",
        body=request,
        method_option=_new_method_option(options),
        need_tenant_access_token=True,
    )
